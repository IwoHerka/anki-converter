"<p>What is the result of the following two invocations?</p><div class=""sourceCode"" id=""cb1""><pre class=""sourceCode elixir""><code class=""sourceCode elixir""><span id=""cb1-1""><a href=""#cb1-1"" aria-hidden=""true""></a>spawn_link(<span class=""kw"">fn</span> <span class=""op"">-&gt;</span> <span class=""cn"">Process</span><span class=""op"">.</span>sleep(<span class=""dv"">4000</span>); <span class=""cn"">IO</span><span class=""op"">.</span>puts(<span class=""st"">""ending""</span>) <span class=""kw"">end</span>)</span><br><span id=""cb1-2""><a href=""#cb1-2"" aria-hidden=""true""></a>spawn_link(<span class=""kw"">fn</span> <span class=""op"">-&gt;</span> <span class=""cn"">Process</span><span class=""op"">.</span>sleep(<span class=""dv"">4000</span>); <span class=""cf"">raise</span>(<span class=""st"">""ending""</span>) <span class=""kw"">end</span>)</span></code></pre></div>"	"<p>First one prints <code>""ending""</code> after 4 seconds and gracefully exits. Second one causes the child process to quit abnormally, which causes the parent process in this case (IEx shell) to exit as well.</p><pre><code>Process #PID&lt;0.147.0&gt; raised an exception ** (RuntimeError) ending<br>(stdlib) erl_eval.erl:678: :erl_eval.do_apply/6</code></pre>"	processes
"<p>Give example of a scenario where <code>System.child_spec/2</code> function might be useful:</p><blockquote><p><code>Supervisor.child_spec/2</code> is a function for explicitly building and overriding child specification.</p><p>Similar to <code>start_link/2</code> and <code>init/2</code>, it expects a module, <code>{module, arg}</code>, or a child specification map. If a two-element tuple in the shape of <code>{module, arg}</code> is given, the child specification is retrieved by calling <code>module.child_spec(arg)</code>. If a module is given, the child specification is retrieved by calling <code>module.child_spec([])</code>.</p><p>After the child specification is retrieved, the fields on overrides are directly applied on the child spec. If overrides has keys that do not map to any child specification field, an error is raised.</p></blockquote><h3 id=""answer"">Answer</h3><p>Scenario where a supervisor needs to start multiple processes with the same default child specs (e.g.Â multiple identical GenServer workers). For example:</p><div class=""sourceCode"" id=""cb1""><pre class=""sourceCode elixir""><code class=""sourceCode elixir""><span id=""cb1-1""><a href=""#cb1-1"" aria-hidden=""true""></a><span class=""kw"">def</span> start_link(_) <span class=""kw"">do</span></span><br><span id=""cb1-2""><a href=""#cb1-2"" aria-hidden=""true""></a>    <span class=""cn"">File</span><span class=""op"">.</span>mkdir_p!(<span class=""ot"">@db_folder</span>)</span><br><span id=""cb1-3""><a href=""#cb1-3"" aria-hidden=""true""></a>    children <span class=""op"">=</span> <span class=""cn"">Enum</span><span class=""op"">.</span>map(<span class=""dv"">1</span><span class=""op"">..</span><span class=""ot"">@pool_size</span>, <span class=""op"">&amp;</span>worker_spec<span class=""op"">/</span><span class=""dv"">1</span>)</span><br><span id=""cb1-4""><a href=""#cb1-4"" aria-hidden=""true""></a>    <span class=""cn"">Supervisor</span><span class=""op"">.</span>start_link(children, <span class=""va"">strategy:</span> <span class=""va"">:one_for_one</span>)</span><br><span id=""cb1-5""><a href=""#cb1-5"" aria-hidden=""true""></a><span class=""kw"">end</span></span><br><span id=""cb1-6""><a href=""#cb1-6"" aria-hidden=""true""></a></span><br><span id=""cb1-7""><a href=""#cb1-7"" aria-hidden=""true""></a><span class=""ot"">@doc</span> <span class=""st"">&quot;Override worker ID in default worker child spec&quot;</span></span><br><span id=""cb1-8""><a href=""#cb1-8"" aria-hidden=""true""></a><span class=""kw"">defp</span> worker_spec(worker_id) <span class=""kw"">do</span></span><br><span id=""cb1-9""><a href=""#cb1-9"" aria-hidden=""true""></a>    default_worker_spec <span class=""op"">=</span> {<span class=""cn"">Todo</span><span class=""op"">.</span><span class=""cn"">DatabaseWorker</span>, {<span class=""ot"">@db_folder</span>, worker_id}}</span><br><span id=""cb1-10""><a href=""#cb1-10"" aria-hidden=""true""></a>    <span class=""cn"">Supervisor</span><span class=""op"">.</span>child_spec(default_worker_spec, <span class=""va"">id:</span> worker_id)</span><br><span id=""cb1-11""><a href=""#cb1-11"" aria-hidden=""true""></a><span class=""kw"">end</span></span></code></pre></div><p>In the above example we want to create multiple copies of a GenServer worker, each with the same default spec. By mapping them over <code>Supervisor.child_spec</code>, we can parametrize each spec in <code>worker_spec/1</code> function.</p>"	<p>supervisor genserver</p>	
"<p>Given the following code, list dates with the same appointments.</p><div class=""sourceCode"" id=""cb1""><pre class=""sourceCode elixir""><code class=""sourceCode elixir""><span id=""cb1-1""><a href=""#cb1-1"" aria-hidden=""true""></a><span class=""va"">:ets</span><span class=""op"">.</span>new(<span class=""va"">:todo_list</span>, [<span class=""va"">:bag</span>, <span class=""va"">:named_table</span>]) <span class=""co""># =&gt; :todo_list</span></span><br><span id=""cb1-2""><a href=""#cb1-2"" aria-hidden=""true""></a><span class=""va"">:ets</span><span class=""op"">.</span>insert(<span class=""va"">:todo_list</span>, {<span class=""op"">~</span>D[<span class=""dv"">2018-05-24</span>], <span class=""st"">&quot;Dentist&quot;</span>}) <span class=""co""># =&gt; true</span></span><br><span id=""cb1-3""><a href=""#cb1-3"" aria-hidden=""true""></a><span class=""va"">:ets</span><span class=""op"">.</span>insert(<span class=""va"">:todo_list</span>, {<span class=""op"">~</span>D[<span class=""dv"">2018-05-24</span>], <span class=""st"">&quot;Shopping&quot;</span>}) <span class=""co""># =&gt; true</span></span><br><span id=""cb1-4""><a href=""#cb1-4"" aria-hidden=""true""></a><span class=""va"">:ets</span><span class=""op"">.</span>insert(<span class=""va"">:todo_list</span>, {<span class=""op"">~</span>D[<span class=""dv"">2018-05-30</span>], <span class=""st"">&quot;Haircut&quot;</span>}) <span class=""co""># =&gt; true</span></span><br><span id=""cb1-5""><a href=""#cb1-5"" aria-hidden=""true""></a><span class=""va"">:ets</span><span class=""op"">.</span>insert(<span class=""va"">:todo_list</span>, {<span class=""op"">~</span>D[<span class=""dv"">2018-05-24</span>], <span class=""st"">&quot;Haircut&quot;</span>}) <span class=""co""># =&gt; true</span></span></code></pre></div>"	"<div class=""sourceCode"" id=""cb1""><pre class=""sourceCode elixir""><code class=""sourceCode elixir""><span id=""cb1-1""><a href=""#cb1-1"" aria-hidden=""true""></a><span class=""va"">:ets</span><span class=""op"">.</span>match_object(<span class=""va"">:todo_list</span>, {<span class=""va"">:_</span>, <span class=""st"">""Haircut""</span>})</span><br><span id=""cb1-2""><a href=""#cb1-2"" aria-hidden=""true""></a><span class=""co""># =&gt; [{~D[2018-05-30], ""Haircut""}, {~D[2018-05-24], ""Haircut""}]</span></span></code></pre></div><p>The function <code>:ets.match_object/2</code> accepts a match pattern - a tuple that describes the shape of the row. The atom <code>:_</code> indicates that you accept any value, so the pattern <code>{:_, ""Dentist""}</code> essentially matches all rows where the second element is <code>""Dentist""</code>.</p>"	ETS exercise
"<p>What is the output of the following code?</p><div class=""sourceCode"" id=""cb1""><pre class=""sourceCode elixir""><code class=""sourceCode elixir""><span id=""cb1-1""><a href=""#cb1-1"" aria-hidden=""true""></a>spawn(<span class=""kw"">fn</span> <span class=""op"">-&gt;</span></span><br><span id=""cb1-2""><a href=""#cb1-2"" aria-hidden=""true""></a>  spawn_link (<span class=""kw"">fn</span> <span class=""op"">-&gt;</span></span><br><span id=""cb1-3""><a href=""#cb1-3"" aria-hidden=""true""></a>      <span class=""cn"">Process</span><span class=""op"">.</span>sleep(<span class=""dv"">1000</span>)</span><br><span id=""cb1-4""><a href=""#cb1-4"" aria-hidden=""true""></a>      <span class=""cn"">IO</span><span class=""op"">.</span>puts(<span class=""st"">&quot;Process 2 finished&quot;</span>)</span><br><span id=""cb1-5""><a href=""#cb1-5"" aria-hidden=""true""></a>  <span class=""kw"">end</span>)              <span class=""op"">|</span></span><br><span id=""cb1-6""><a href=""#cb1-6"" aria-hidden=""true""></a>    <span class=""cf"">raise</span>(<span class=""st"">&quot;Something went wrong in Process 1&quot;</span>)</span><br><span id=""cb1-7""><a href=""#cb1-7"" aria-hidden=""true""></a><span class=""kw"">end</span>)</span></code></pre></div>"	<pre><code>#PID&lt;0.140.0&gt;  15:00:40.443 [error] Process                           <br>ong in Process 1     (stdlib) erl_eval.erl:678: :erl_eval.do_apply/6</code></pre><p><code>spawn_link/1</code> connects exactly two processes and is always bidirectional. Even though Process2 is sleeping, because Process 1 terminated abnormally, which caused an exit signal emitted to Process 2; As a result Process 2 exits as well.</p>	processes