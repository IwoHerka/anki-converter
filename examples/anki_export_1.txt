What is MIME and media types. 	Because the Internet hosts many thousands of different data types, HTTP carefully tags each object being transported through the Web with a data format label called a MIME type. MIME (Multipurpose Internet Mail Extensions) was originally designed to solve problems encountered in moving messages between different electronic mail systems. MIME worked so well for email that HTTP adopted it to describe and label its own multimedia content.<br><br>Web servers attach a MIME type to all HTTP object data. When a web browser gets an object back from a server, it looks at the associated MIME type to see if it knows how to handle the object. Most browsers can handle hundreds of popular object types: displaying image files, parsing and formatting HTML files, playing audio files through the computer’s speakers, or launching external plug-in software to handle special formats.<br><br>MIME type is a textual label, represented as a primary object type and a specific subtype, separated by a slash. For example:<br><br>• An HTML-formatted text document would be labeled with type <code>text/html</code>.<br>• A plain ASCII text document would be labeled with type <code>text/plain</code>.<br>• A JPEG version of an image would beimage/jpeg.<br>• A GIF-format image would be <code>image/gif</code>.
Explain what is URI.	Each web server resource has a name, so clients can point out what resources they are interested in. The server resource name is called a uniform resource identifier, or URI. URIs are like the postal addresses of the Internet, uniquely identifying and locating information resources around the world.<br><br>Here’s a URI for an image resource on Joe’s Hardware store’s web server: <code>http://www.joes-hardware.com/specials/saw-blade.gif</code>
Explain what is URL.	The uniform resource locator (URL) is the most common form of resource identifier. URLs describe the specific location of a resource on a particular server. They tell you exactly how to fetch a resource from a precise, fixed location.
Describe general format of a HTTP message.	"HTTP messages consist of three parts:<br><br><b>Start line</b><br>The first line of the message is the start line, indicating what to do for a request or what happened for a response.<br><br><b>Header fields</b><br>Zero or more header fields follow the start line. Each header field consists of a name and a value, separated by a colon (:) for easy parsing. The headers end with a blank line. Adding a header field is as easy as adding another line.<br><br><b>Body</b><br>After the blank line is an optional message body containing any kind of data. Request bodies carry data to the web server; response bodies carry data back to the client. Unlike the start lines and headers, which are textual and structured, the body can contain arbitrary binary data (e.g., images, videos, audio tracks, software applications). Of course, the body can also contain text.<br><br><img src=""16683744372867170529993559701274.jpg"">"
Explain relation between HTTP and TCP/IP.	HTTP is an application layer protocol. HTTP doesn’t worry about the nitty-gritty details of network communication; instead, it leaves the details of networking to TCP/IP, the popular reliable Internet transport protocol.<br><br>TCP provides:<br>• Error-free data transportation<br>• In-order delivery (data will always arrive in the order in which it was sent)<br>• Unsegmented data stream (can dribble out data in any size at any time)<br><br>The Internet itself is based on TCP/IP, a popular layered set of packet-switched net-work protocols spoken by computers and network devices around the world. TCP/IP hides the peculiarities and foibles of individual networks and hardware, letting com-puters and networks of any type talk together reliably.<br><br>Once a TCP connection is established, messages exchanged between the client and server computers will never be lost, damaged, or received out of order.<br>In networking terms, the HTTP protocol is layered over TCP. HTTP uses TCP to transport its message data. Likewise, TCP is layered over IP.
What is a hostname?	The hostname (“www.netscape.com”) is just a human-friendly alias for an IP address. Hostnames can easily be converted into IP addresses through a facility called the Domain Name Service (DNS).
What is Telnet?	The Telnet utility connects your keyboard to a destination TCP port and connects the TCP port output back to your display screen. Telnet is commonly used for remote terminal sessions, but it can generally connect to any TCP server, including HTTP servers.<br><br>You can use the Telnet utility to talk directly to web servers. Telnet lets you open a TCP connection to a port on a machine and type characters directly into the port.<br>The web server treats you as a web client, and any data sent back on the TCP con-nection is displayed onscreen.
What is a proxy?	A proxy sits between a client and a server, receiving all of the client’s HTTP requests and relaying the requests to the server (perhaps after modifying the requests). These applications act as a proxy for the user, accessing the server on the user’s behalf.<br><br>Proxies are often used for security, acting as trusted intermediaries through which all web traffic flows. Proxies can also filter requests and responses; for example, to detect application viruses in corporate downloads or to filter adult content away from elementary-school students.
"What's a web cache?"	A web cache or caching proxy is a special type of HTTP proxy server that keeps cop-ies of popular documents that pass through the proxy. The next client requesting the same document can be served from the cache’s personal copy.<br><br>A client may be able to download a document much more quickly from a nearby cache than from a distant web server. HTTP defines many facilities to make caching more effective and to regulate the freshness and privacy of cached content.
"What's a gateway?"	Gateways are special servers that act as intermediaries for other servers. They are often used to convert HTTP traffic to another protocol. A gateway always receives requests as if it was the origin server for the resource. The client may not be aware it is communicating with a gateway.<br><br>For example, an HTTP/FTP gateway receives requests for FTP URIs via HTTP requests but fetches the documents using the FTP protocol. The resulting document is packed into an HTTP message and sent to the client.
"What's a tunnel?"	Tunnels are HTTP applications that, after setup, blindly relay raw data between two connections. HTTP tunnels are often used to transport non-HTTP data over one or more HTTP connections, without looking at the data.<br><br>One popular use of HTTP tunnels is to carry encrypted Secure Sockets Layer (SSL) traffic through an HTTP connection, allowing SSL traffic through corporate fire-walls that permit only web traffic. An HTTP/SSL tunnel receives an HTTP request to establish an outgoing connection to a destination address and port, then proceeds to tunnel the encrypted SSL traffic over the HTTP channel so that it can be blindly relayed to the destination server.
"What's an (user) agent?"	User agents (or just agents) are client programs that make HTTP requests on the user’s behalf. Any application that issues web requests is an HTTP agent. So far, we’ve talked about only one kind of HTTP agent: web browsers. But there are many other kinds of user agents.
Explain URL structure. 	<pre>scheme://user:password@host:port/path?query#frag</pre>
Describe (textual) structure of the HTTP message.	The request/response message consists of the following:<br><br> - Request line, such as <code>GET /logo.gif HTTP/1.1</code> or Status line, such as <code>HTTP/1.1 200 OK</code>,<br> - Headers<br> - An empty line<br> - Optional HTTP message body data<br><br>The request/status line and headers must all end with <CR><LF> (that is, a carriage return followed by a line feed, <code>\r\n</code>). The empty line must consist of only <CR><LF> and no other whitespace. For example:<br><pre><br>HTTP/1.1 200 OK\r\n<br>Server: Apache/2.2.8 (Ubuntu) mod_ssl/2.2.8\r\n<br>Last-Modified: Sun, 26 Sep 2010 22:04:35 GMT\r\n<br>Accept-Ranges: bytes\r\n<br>Content-Length: 12\r\n<br>Content-Type: text/html\r\n<br>\r\n<br>Hello world!<br></pre>
"What's the format of the request line?"	<pre>method request-URL version</pre><br>For example:<pre>GET /books HTTP/1.1</pre>
"What's the response line?"	<pre>version status reason-phrase</pre><br>For example:<pre>HTTP/1.1 200 OK</pre>
Explain headers part of an HTTP/1.1 message.	It consists of zero or more headers, each of which is a name, followed by a colon (:), followed by optional whitespace, followed by a value, followed by a CRLF. The headers are terminated by a blank line (CRLF), marking the end of the list of headers and the beginning of the entity body. Some versions of HTTP, such as HTTP/1.1, require certain headers to be present for the request or response message to be valid. For example:<pre>[start line]<br>Content-type: text/plain\r\n<br>Content-length: 199\r\n<br>\r\n<br>[body]</pre>
List and briefly explain all HTTP methods.	"<img src=""16683848719148991653344269331265.jpg"">"
Explain purposes of status code ranges.	"<img src=""16683849424178621459291641490615.jpg"">"
Explain HEAD method 	The HEAD method behaves exactly like the GET method, but the server returns only the headers in the response. No entity body is ever returned. This allows a client to inspect the headers for a resource without having to actually get the resource. Using HEAD, you can:<br><br>• Find out about a resource (e.g., determine its type) without getting it.<br>• See if an object exists, by looking at the status code of the response.<br>• Test if the resource has been modified, by looking at the headers.
Is sending username and clear-text password to server in order to authenticate safe?	"It's (reasonably) safe when using HTTPS (since all communication is encrypted) and passwords are hashed in the database."