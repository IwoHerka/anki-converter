"<p>Give example of a scenario where <code>System.child_spec/2</code>function might be useful:</p><blockquote><p><ahref=""https://hexdocs.pm/elixir/Supervisor.html#child_spec/2""><code>Supervisor.child_spec/2</code></a>is a function for explicitly building and overriding childspecification.</p><p>Similar to <code>start_link/2</code> and <code>init/2</code>, itexpects a module, <code>{module, arg}</code>, or a child specificationmap. If a two-element tuple in the shape of <code>{module, arg}</code>is given, the child specification is retrieved by calling<code>module.child_spec(arg)</code>. If a module is given, the childspecification is retrieved by calling<code>module.child_spec([])</code>.</p><p>After the child specification is retrieved, the fields on overridesare directly applied on the child spec. If overrides has keys that donot map to any child specification field, an error is raised.</p></blockquote>"	"<p>Scenario where a supervisor needs to start multiple processes withthe same default child specs (e.g. multiple identical GenServerworkers). For example:</p><pre><code>def start_link(_) do
    File.mkdir_p!(@db_folder)
    children = Enum.map(1..@pool_size, &amp;worker_spec/1)
    Supervisor.start_link(children, strategy: :one_for_one)
end

@doc &quot;Override worker ID in default worker child spec&quot;
defp worker_spec(worker_id) do
    default_worker_spec = {Todo.DatabaseWorker, {@db_folder, worker_id}}
    Supervisor.child_spec(default_worker_spec, id: worker_id)
end</code></pre><p>In the above example we want to create multiple copies of a GenServerworker, each with the same default spec. By mapping them over <ahref=""https://hexdocs.pm/elixir/Supervisor.html#child_spec/2""><code>Supervisor.child_spec/2</code></a>,we can parametrize each spec in <code>worker_spec/1</code> function.</p>"	supervisor genserver
"<p>What’s the difference between <code>require</code>,<code>import</code> and <code>use</code>?</p>"	"<p>A module consists of functions and macros. You can use functions inother modules using fully qualified names but not macros; you need to<code>require</code> a module to use its macros:</p><pre><code>Integer.mod(5, 3)
# =&gt; 2
Integer.is_even(42) 
# =&gt; ** (CompileError) iex:3: you must require Integer before invoking the macro Integer.is_even/1
(elixir) src/elixir_dispatch.erl:97: :elixir_dispatch.dispatch_require/6
require Integer Integer
Integer.is_even(42)
# =&gt; true</code></pre><p><code>use</code> <em>requires</em> the given module and then callsthe <code>__using__/1</code> callback on it allowing the module toinject some code into the current context. So writing <code>use X</code>is same as writing:</p><pre><code>require X
X.__using__() </code></pre><p><code>import</code> basically imports the modules namespace so youdon’t have to use the fully qualified name when calling functions andmacros.</p>"	language
"<p>How do you start a project called <code>hello_world</code> using <ahref=""https://hexdocs.pm/elixir/mix"">Mix</a>?</p>"	"<ol type=""1""><li>Change to directory where you want the project root to reside</li><li>Execute command <code>mix new hello_world</code></li><li>Above <code>mix</code> command creates a project root called<code>hello_world</code> and the following files/sub-directories:<ul><li><code>mix.exs</code> - Project configuration</li><li><code>lib/</code> - Source code</li><li><code>config/</code> - Application configuration</li><li><code>test/</code> - Unit tests</li><li><code>.formatter</code> - Configuration for<code>mix format</code></li></ul></li></ol>"	mix
"<p>What does <code>iex -S mix</code> do?</p>"	"<p><code>iex -S &lt;scriptname&gt;</code> is used to start the IExsession and execute the script in its context. Running<code>iex -S mix</code> tells <code>iex</code> to execute<code>mix</code> command, which is a shorthand for <code>mix run</code>,which runs the Mix project in current directory.</p><p>According to José, a capital <code>-S</code> (in contrast to standard<code>-s</code>) is used to signify that this option behaves differentlythan other options. All arguments <strong>after<code>-S &lt;scriptname&gt;</code> are passed to the script</strong>.For example, if you want to run tests in iex with specific options, youmight run something like the following:</p><pre><code>iex -S mix test --only line:12 test/some/particular/file_test.exs</code></pre>"	iex mix
"<p>When you create a new project using <code>mix new hello_world</code>what are the artifacts created?</p>"	"<p>The following file structure is generated:</p><pre><code>hello_world/
  ├── .formatter.exs
  ├── .gitignore
  ├── config/
  │   └── config.exs
  ├── lib/
  │   └── hello_world.ex
  ├── mix.exs
  ├── README.md
  └── test/
      ├── hello_world_test.exs
      └── test_helper.exs</code></pre><p>Here’s a brief overview of the generated files and directories:</p><ul><li><p><code>.formatter.exs</code> - This file contains theconfiguration for the Elixir code formatter, which helps maintain aconsistent code style across the project.</p></li><li><p><code>.gitignore</code> - This file lists files and directoriesthat should be ignored by the Git version control system.</p></li><li><p><code>config/</code> This directory contains the configurationfiles for your application. The config.exs file is the mainconfiguration file and can be used to define global orenvironment-specific configurations.</p></li><li><p><code>lib/</code> - This directory contains the Elixir sourcecode files for your application. In this case, it contains the mainmodule file <code>hello_world.ex</code>.</p></li><li><p><code>mix.exs</code> - This is the project configuration file. Itdefines your project’s dependencies, compilation options, and otherproject-related settings.</p></li><li><p><code>README.md</code> - This is a Markdown file containingdocumentation or instructions for your project.</p></li><li><p><code>test/</code> - This directory contains the test files foryour application. The <code>test_helper.exs</code> file sets up thetesting environment, and the <code>hello_world_test.exs</code> filecontains an example test for the <code>HelloWorld</code>module.</p></li></ul>"	mix
"<p>Given the following code, list dates with the same appointments.</p><div class=""sourceCode"" id=""cb1""><pre
class=""sourceCode elixir""><code class=""sourceCode elixir""><span id=""cb1-1""><a href=""#cb1-1"" aria-hidden=""true"" tabindex=""-1""></a><span class=""va"">:ets</span><span class=""op"">.</span>new<span class=""fu"">(</span><span class=""va"">:todo_list</span>, <span class=""ot"">[</span><span class=""va"">:bag</span>, <span class=""va"">:named_table</span><span class=""ot"">]</span><span class=""fu"">)</span> <span class=""co""># =&gt; :todo_list</span></span>
<span id=""cb1-2""><a href=""#cb1-2"" aria-hidden=""true"" tabindex=""-1""></a><span class=""va"">:ets</span><span class=""op"">.</span>insert<span class=""fu"">(</span><span class=""va"">:todo_list</span>, <span class=""fu"">{</span><span class=""op"">~</span>D<span class=""ot"">[</span><span class=""dv"">2018</span><span class=""bn"">-05</span><span class=""dv"">-24</span><span class=""ot"">]</span>, <span class=""st"">&quot;Dentist&quot;</span><span class=""fu"">})</span> <span class=""co""># =&gt; true</span></span>
<span id=""cb1-3""><a href=""#cb1-3"" aria-hidden=""true"" tabindex=""-1""></a><span class=""va"">:ets</span><span class=""op"">.</span>insert<span class=""fu"">(</span><span class=""va"">:todo_list</span>, <span class=""fu"">{</span><span class=""op"">~</span>D<span class=""ot"">[</span><span class=""dv"">2018</span><span class=""bn"">-05</span><span class=""dv"">-24</span><span class=""ot"">]</span>, <span class=""st"">&quot;Shopping&quot;</span><span class=""fu"">})</span> <span class=""co""># =&gt; true</span></span>
<span id=""cb1-4""><a href=""#cb1-4"" aria-hidden=""true"" tabindex=""-1""></a><span class=""va"">:ets</span><span class=""op"">.</span>insert<span class=""fu"">(</span><span class=""va"">:todo_list</span>, <span class=""fu"">{</span><span class=""op"">~</span>D<span class=""ot"">[</span><span class=""dv"">2018</span><span class=""bn"">-05</span><span class=""dv"">-30</span><span class=""ot"">]</span>, <span class=""st"">&quot;Haircut&quot;</span><span class=""fu"">})</span> <span class=""co""># =&gt; true</span></span>
<span id=""cb1-5""><a href=""#cb1-5"" aria-hidden=""true"" tabindex=""-1""></a><span class=""va"">:ets</span><span class=""op"">.</span>insert<span class=""fu"">(</span><span class=""va"">:todo_list</span>, <span class=""fu"">{</span><span class=""op"">~</span>D<span class=""ot"">[</span><span class=""dv"">2018</span><span class=""bn"">-05</span><span class=""dv"">-24</span><span class=""ot"">]</span>, <span class=""st"">&quot;Haircut&quot;</span><span class=""fu"">})</span> <span class=""co""># =&gt; true</span></span></code></pre></div>"	"<div class=""sourceCode"" id=""cb1""><pre
class=""sourceCode elixir""><code class=""sourceCode elixir""><span id=""cb1-1""><a href=""#cb1-1"" aria-hidden=""true"" tabindex=""-1""></a><span class=""va"">:ets</span><span class=""op"">.</span>match_object<span class=""fu"">(</span><span class=""va"">:todo_list</span>, <span class=""fu"">{</span><span class=""va"">:_</span>, <span class=""st"">&quot;Haircut&quot;</span><span class=""fu"">})</span></span>
<span id=""cb1-2""><a href=""#cb1-2"" aria-hidden=""true"" tabindex=""-1""></a><span class=""co""># =&gt; [{~D[2018-05-30], &quot;Haircut&quot;}, {~D[2018-05-24], &quot;Haircut&quot;}]</span></span></code></pre></div><p>The function <ahref=""https://www.erlang.org/doc/man/ets.html#match_object-2""><code>:ets.match_object/2</code></a>accepts a match pattern - a tuple that describes the shape of the row.The atom <code>:_</code> indicates that you accept any value, so thepattern <code>{:_, ""Dentist""}</code> essentially matches all rows wherethe second element is <code>""Dentist""</code>.</p>"	ets erlang
"<p>What is the output of the following code?</p><pre><code>spawn(fn -&gt;
  spawn_link (fn -&gt;
      Process.sleep(1000)
      IO.puts(&quot;Process 2 finished&quot;)
  end)              |

  raise(&quot;Something went wrong in Process 1&quot;)
end)</code></pre>"	"<pre><code>#PID&lt;0.140.0&gt;  15:00:40.443 [error] in Process 1    
(stdlib) erl_eval.erl:678: :erl_eval.do_apply/6</code></pre><p><ahref=""https://hexdocs.pm/elixir/Kernel.html#spawn_link/1""><code>Kernel.spawn_link/1</code></a>connects exactly two processes and is always bidirectional. Even thoughProcess 2 is sleeping, because Process 1 terminated abnormally, whichcaused an exit signal emitted to Process 2. As a result Process 2 exitsas well.</p>"	processes
"<p>What is the result of the following two invocations?</p><pre><code>spawn_link(fn -&gt; Process.sleep(4000); IO.puts(&quot;ending&quot;) end)
spawn_link(fn -&gt; Process.sleep(4000); raise(&quot;ending&quot;) end)</code></pre>"	"<p>First one prints <code>""ending""</code> after 4 seconds and gracefullyexits. Second one causes the child process to quit abnormally, whichcauses the parent process in this case (IEx shell) to exit as well.</p>"	``` Process #PID<0.147.0> raised an exception ** (RuntimeError) ending (stdlib) erl_eval.erl:678: :erl_eval.do_apply/6 ```
"<p>When you start your BEAM instance with the <code>--hidden</code>argument, the node isn’t seen in other nodes’ connected lists (and viceversa). In what scenario this is useful?</p>"	"<p>A simple example is starting a local node that acts as a remote shellto another node. Another example is an instrumentation tool - a nodethat connects to another node, collects all sorts of metrics from it,and presents the results in a GUI.</p><p>Such nodes are helpers that shouldn’t be part of the cluster, and youusually don’t want them to be seen as such. For this purpose, you canmake a hidden connection</p>"	distribution
"<p>In the following code, why is the ETS table wrapped in<code>GenServer</code>? Why there’s no callback code for<code>get</code> and <code>put</code>?</p><pre><code>defmodule ETSKeyValue do
    use GenServer
    
    def start_link() do
        GenServer.start_link(__MODULE__, nil, name: __MODULE__)
    end
    
    def init(_) do
        :ets.new(__MODULE__, [:named_table, :public, write_concurrency: true])
        {:ok, nil}
    end
    
    def put(key, value) do
        :ets.insert(__MODULE__, {key, value})
    end
    
    def get(key) do
        case :ets.lookup(__MODULE__, key) do
            [{^key,value}] -&gt; value
            [] -&gt; nil
        end
    end
end</code></pre>"	"<ol type=""1""><li><p>An ETS table is deeply connected to its owner process (bydefault, the process that created the table). If the owner processterminates, the ETS table is reclaimed. So the sole purpose of thisGenServer process is to keep the table alive.</p></li><li><p>Get and put operations now don’t go through the server process.This means that multiple clients can work with the key/value storesimultaneously, without blocking each other.</p></li></ol>"	ets genserver
"<p>Why is the following error thrown?</p><pre><code>table = :ets.new(:my_table, [])
# =&gt; #Reference&lt;0.4030288514.1534984196.194401&gt;
:ets.insert(table, {:key_1,1})
# =&gt; true
spawn(fn -&gt; :ets.insert(table, {:key_3, 3}) end)
# =&gt; #PID&lt;0.113.0&gt;
# Process #PID&lt;0.113.0&gt; raised an exception ** (ArgumentError) argument error (stdlib)
:ets.insert(#Reference&lt;0.4030288514.1534984196.194401&gt;, {:key_3, 3})
# =&gt; nil</code></pre>"	"<p>ETS table’s have by default <strong>protected</strong> accesspermissions and only the owner process can read from and write to thetable. All other processes can only read from the table. You can fix itby making the table access to public.</p><pre><code>table = :ets.new(:table, [:public]) 
# =&gt; #Reference&lt;0.4030288514.1534984196.194527&gt;
spawn(fn -&gt; :ets.insert(table, {:key_3, 5}) end)
# =&gt; #PID&lt;0.123.0&gt;
:ets.lookup(table, :key_3)
# =&gt; [key_3: 5]</code></pre><p>Here are the table access permissions:</p><ul><li><code>protected</code> - The default. The owner process can readfrom and write to the table. All other processes can read from thetable.</li><li><code>public</code> - All processes can read from and write to thetable.</li><li><code>private</code> - Only the owner process can access thetable.</li></ul>"	ets
"<p>Elixir allows you to define you child spec as part of your module ifyou don’t want to use the default <ahref=""https://hexdocs.pm/elixir/GenServer.html""><code>child_spec</code></a>provided by <code>GenServer</code>. For example:</p><pre><code>defmodule Stack do
    use GenServer
    
    def start_link(state) do
        GenServer.start_link(__MODULE__, state, name: __MODULE__)
    end
    
    def child_spec(arg) do
        %{id: Stack, start: {Stack, :start_link, [arg]}}
    end

    ... 
end</code></pre><p>How do you override this child spec when starting the supervisor?</p>"	"<p>If you need to convert a tuple or a module child specification to amap or modify a child specification, you can use the <ahref=""https://hexdocs.pm/elixir/Supervisor.html#child_spec/2""><code>Supervisor.child_spec/2</code></a>function. For example, to run the stack with a different<code>:id</code> and a <code>:shutdown</code>:</p><pre><code>children = [Supervisor.child_spec({Stack, [:hello]}, id: MyStack, shutdown: 10_000)]
Supervisor.start_link(children, strategy: :one_for_one)</code></pre>"	supervisor genserver
"<p>What are guard clauses?</p>"	"<p>Guard clauses are a way to augment pattern matching with more complexchecks. They are allowed in a predefined set of constructs where patternmatching is allowed. They are predicates, which are used toconditionally invoke function clauses.</p><p>Not all expressions are allowed in guard clauses, but only a handfulof them. This is a deliberate choice. This way, Elixir (and Erlang) canmake sure that nothing bad happens while executing guards and nomutations happen anywhere. It also allows the compiler to optimize thecode related to guards efficiently.</p><pre><code>defmodule Factorial do
    def of(0), do: 1
    
    def of(n) when n &gt; 0 do
        n * of(n-1)
    end
end</code></pre>"	language
"<p>When a supervisor is terminated, where do you specify the strategy tohandle children processes?</p>"	"<p>In <ahref=""https://hexdocs.pm/elixir/Supervisor.html#start_link/2""><code>Supervisor.start_link(child_spec, options)</code></a>as part of the options. For example:</p><pre><code>Supervisor.start_link([
    Todo.ProcessRegistry, Todo.Cache, Todo.Database],
    strategy: :one_for_one,
    shutdown: 10_000
)</code></pre><p>When a supervisor process terminates, it will instruct its childrento terminate gracefully, thus giving them the chance to do finalcleanup. If some of those children are themselves supervisors, they willtake down their own trees in the same way. Graceful termination of a<code>GenServer</code> worker involves invoking the <ahref=""https://hexdocs.pm/elixir/GenServer.html#terminate/2""><code>terminate/2</code></a>callback, but only if the worker process is trapping exits. Becausegraceful termination involves the possible execution of cleanup code, itmay take longer than desired. The <code>:shutdown</code> option in achild specification lets you control how long the supervisor will waitfor the child to terminate gracefully. Possible values for<code>:shutdown</code> are:</p><ul><li>time specified in milliseconds</li><li><code>:infinity</code> - instructs the supervisor to waitindefinitely for the child to terminate</li><li><code>:brutal_kill</code> - tells the supervisor to immediatelyterminate the child in a forceful way</li></ul><p>The default value of the <code>:shutdown</code> option is 5000ms fora worker process or <code>:infinity</code> for a supervisor process.</p>"	supervisor genserver
