"<p>What is <em>m:n</em> threading?</p>
"	"<p>In <em>m:n</em> threading, <em>n</em> OS threads execute <em>m</em> microthreads (Erlang processes). In other words, BEAM maps some <em>n</em> number of OS threads onto some <em>m</em> number of BEAM processes.</p>
"	
"<p>Which transportation layers Phoenix uses for it's Channels and LiveView?</p>
"	"<p>Websockets and long polling.</p>
"	
"<p>How to export all functions at once from an Erlang module?</p>
"	"<p><code>-compile(export_all).</code></p>
"	
"<p>How to check current BEAM memory usage?</p>
"	"<p><code>:erlang.memory()</code></p>
"	
"<p>How do you retrieve the stored value for an Agent?</p>
"	"<p>Agent.get(fn value -&gt; value end)</p>
"	
"<p>What will <code>catch exit(err)</code> return?</p>
"	"<p><code>{'EXIT', err}</code></p>
"	
"<p>When ETS can be useful?</p>
"	"<p>Typical situations where ETS tables can be useful are shared key/value structures and counters. Although these scenarios can also be implemented with GenServer, such solutions might lead to performance and scalability issues.</p>
"	
"<p>Explain four main Ecto's components.</p>
"	"<p>Ecto is split into 4 main components:<br />
<br />
Ecto.Repo - repositories are wrappers around the data store. Via the repository, we can create, update, destroy and query existing entries. A repository needs an adapter and credentials to communicate to the database<br />
<br />
Ecto.Schema - schemas are used to map external data into Elixir structs. We often use them to map database tables to Elixir data but they have many other use cases<br />
<br />
Ecto.Query - written in Elixir syntax, queries are used to retrieve information from a given repository. Ecto queries are secure and composable<br />
<br />
Ecto.Changeset - changesets provide a way for track and validate changes before they are applied to the data<br />
<br />
In summary:<br />
<br />
Ecto.Repo - where the data is<br />
Ecto.Schema - what the data is<br />
Ecto.Query - how to read the data<br />
Ecto.Changeset - how to change the data</p>
"	
"<p>What is the output of the following code?</p>
<div class=""sourceCode"" id=""cb1""><pre class=""sourceCode elixir""><code class=""sourceCode elixir""><span id=""cb1-1""><a href=""#cb1-1"" aria-hidden=""true""></a>spawn(<span class=""kw"">fn</span> <span class=""op"">-&gt;</span></span>
<span id=""cb1-2""><a href=""#cb1-2"" aria-hidden=""true""></a>  spawn_link(<span class=""kw"">fn</span> <span class=""op"">-&gt;</span></span>
<span id=""cb1-3""><a href=""#cb1-3"" aria-hidden=""true""></a>    <span class=""cn"">Process</span><span class=""op"">.</span>sleep(<span class=""dv"">1000</span>)</span>
<span id=""cb1-4""><a href=""#cb1-4"" aria-hidden=""true""></a>    <span class=""cn"">IO</span><span class=""op"">.</span>puts(<span class=""st"">&quot;Process 2 finished&quot;</span>)</span>
<span id=""cb1-5""><a href=""#cb1-5"" aria-hidden=""true""></a>  <span class=""kw"">end</span>)</span>
<span id=""cb1-6""><a href=""#cb1-6"" aria-hidden=""true""></a>  <span class=""cf"">raise</span>(<span class=""st"">&quot;Something went wrong in Process 1&quot;</span>)</span>
<span id=""cb1-7""><a href=""#cb1-7"" aria-hidden=""true""></a><span class=""kw"">end</span>)</span></code></pre></div>
<h3 id=""answer"">Answer</h3>
<p>Something like:</p>
<pre><code>#PID&lt;0.140.0&gt; 15:00:40.443 [error] Process #PID&lt;0.140.0&gt; raised an exception **
(RuntimeError) Something went wrong in Process 1 (stdlib) erl_eval.erl:678: :erl_eval.do_apply/6</code></pre>
<p><code>spawn_link/1</code> connects exactly two processes and is always bidirectional. Even though process 2 is sleeping, because process 1 terminated abnormally, which caused an exit signal emitted to process 2; As a result process 2 exits as well.</p>
"	"<p>exercise</p>
"	
"<p>What is Ecto?</p>
"	"<p>Ecto is the database wrapper and query generator for Elixir. Ecto provides a standardized API and a set of abstractions for talking to all the different kinds of databases, so that Elixir developers can query whatever database they're using by employing similar constructs.</p>
"	
"<p>How would you write an Agent using GenServer? API should be like this:</p>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(3)&gt; {:ok, pid}=GenServerAsAgent.
start_link(fn -&gt;0 end)  {:ok, #PID&lt;0.116.0&gt;} iex(4)&gt; GenServerAsAgent
.get(pid, fn x-&gt; x end) 0 iex(5)&gt; GenServerAsAgent.put(pid, fn x-&gt; x+
1 end)    :ok iex(6)&gt; GenServerAsAgent.get(pid, fn x-&gt; x end)      1</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
"	"<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>defmodule GenServerAsAgent do use GenServer  def
 start_link(init_fun) do  GenServer.start_link(__MODULE__, init_fun)
end  def get(pid, fun) do  GenServer.call(pid, {:get, fun}) end  def
put(pid, fun) do  GenServer.call(pid, {:update, fun}) end  def init(i
nit_fun) do  {:ok, init_fun.()} end  def handle_call({:get,fun}, _cal
ler, state) do  {:reply, fun.(state), state} end  def handle_call({:u
pdate, fun}, _caller, state) do  {:reply, :ok, fun.(state)} end  end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
"	
"<p>True or False: Crash in process started by Task.async/1 also crashes the process that started it</p>
"	"<p>True, Task.async/1 links the new task to the starter process. Therefore, if you are starting multiple tasks and if any task process crashes, the starter process will crash too (unless it’s trapping exits). The crash of the starter process will, in turn, cause all the other tasks started by the same process to crash. In other words, starting multiple tasks with Task.async/1 has all-or-nothing semantics. The crash of a single task takes down all other tasks as well as the starter process. </p>
"	
"<p>How to concatenate two lists in Elixir?</p>
"	"<p><code>[a, b, c] ++ [d, e, f]</code></p>
"	
"<p>What happens with original message sent to GenServer after receive block times out on the sender side?</p>
"	"<p>Nothing. Original message remains in server queue and will be processed at some point. Timeout only means that client stopped waiting for it.</p>
"	
"<p>Assume that you want a node to be running between ports 10_000 and 10_100. How would you configure it?</p>
"	"<div>
<div>
<div>
<p>This can be done by setting the <em>inet_dist_listen_min</em> and <em>inet_dist_listen_max</em> environment variables of the kernel app at the command line:</p>
</div>
</div>
</div>
<div>
<div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>$ iex \</code></pre>
<pre style=""line-height: 125%""><code> --erl &#39;-kernel inet_dist_listen_min 10000&#39; \</code></pre>
<pre style=""line-height: 125%""><code>--erl &#39;-kernel inet_dist_listen_max 10100&#39; \</code></pre>
<pre style=""line-height: 125%""><code> --sname node1@localhost</code></pre>
</div></td>
</tr>
</tbody>
</table>
<div>
<div>
<div>
<div>
<p>The node will listen on the first port available in the given range. If you’re sure there won’t be a port clash, you can use the same value for both parameters, thus effectively designating a single port to be used.</p>
</div>
<div>
<p>You can manually inspect the ports of all nodes on the host machine via :net_adm .names/0:</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(node1@localhost)1&gt; :net_adm.names()  {:ok, [{&#39;node1&#39;, 10000}]}</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
"	
"<p>How to return real-time information about given process in Elixir?</p>
"	"<p>Using <code>Process</code> module:<br />
</p>
<pre><code>Process.info(pid)</code></pre>
"	
"<p>By default, a supervisor restarts a terminated process <strong>regardless of the exit reason</strong>.If you don't want your supervised process to be restarted if it terminates with :normal, where do you configure it?</p>
"	"<div>
<div>
<div>
<p>You can set up a transient worker by providing <strong>restart: :transient</strong> in your Worker's <strong>child_spec/1</strong>. </p>
</div>
<div>
<div>
<p>The following restart values are supported in the :restart option:</p>
</div>
<div>
<p><strong>:permanent</strong> - the child process is always restarted</p>
</div>
<div>
<p><strong>:temporary</strong> - the child process is never restarted (not even when the supervisor's strategy is :rest_for_one or :one_for_all)</p>
</div>
<div>
<p><strong>:transient</strong> - the child process is restarted only if it terminates abnormally, i.e., with an exit reason other than :normal, :shutdown or {:shutdown, term}</p>
</div>
<div>

</div>
</div>
</div>
</div>
"	
"<p>What is <code>System</code> module?</p>
"	"<p>The <code>System</code> module provides functions that interact directly with the VM or the host system. It also provides functions that work with time, returning different times kept by the system with support for different time units.</p>
"	
"<p>Explain <code>{try_clause,V}</code> error (<code>TryClauseError</code>).</p>
"	"<table>
<tbody>
<tr class=""odd"">
<td style=""text-align: left;"">No matching branch is found when evaluating the of-section of a <span style=""background-color: rgb(243, 243, 243);"">try</span> expression. The value <span style=""background-color: rgb(243, 243, 243);"">V</span> did not match.</td>
</tr>
</tbody>
</table>
"	
"<p>Describe a scenario when a child_spec/1 callback need to be implmented?</p>
"	"<p>* When you want to run a Module as supervised</p>
<div>
<p>                       <strong>and</strong><br />
</p>
<div>
<p>* The Supervised module is not implementing GenServer behavior(thereby we don't get the automatic implementation of child_spec/1 by GenServer)</p>
</div>
</div>
"	
"<p>How to check currently running applications in BEAM?</p>
"	"<p>:application.which_applications() or application:which_applications()</p>
"	
"<p>How to preview module attributes/metadata in Erlang?</p>
"	"<p>VIa <code>module_info()</code> function, e.g. <code>sys:module_info()</code>.<br />
<br />
<br />
5.5 module_info/0 and module_info/1 functions<br />
<br />
The compiler automatically inserts the two special, exported functions into each module:<br />
<br />
Module:module_info/0<br />
Module:module_info/1<br />
<br />
These functions can be called to retrieve information about the module.<br />
module_info/0<br />
<br />
The module_info/0 function in each module, returns a list of {Key,Value} tuples with information about the module. Currently, the list contain tuples with the following Keys: module, attributes, compile, exports, md5 and native. The order and number of tuples may change without prior notice.<br />
module_info/1<br />
<br />
The call module_info(Key), where Key is an atom, returns a single piece of information about the module.<br />
<br />
The following values are allowed for Key:<br />
<br />
module<br />
<br />
Returns an atom representing the module name.<br />
attributes<br />
<br />
Returns a list of {AttributeName,ValueList} tuples, where AttributeName is the name of an attribute, and ValueList is a list of values. Notice that a given attribute can occur more than once in the list with different values if the attribute occurs more than once in the module.<br />
<br />
The list of attributes becomes empty if the module is stripped with the beam_lib(3) module (in STDLIB).<br />
compile<br />
<br />
Returns a list of tuples with information about how the module was compiled. This list is empty if the module has been stripped with the beam_lib(3) module (in STDLIB).<br />
md5<br />
<br />
Returns a binary representing the MD5 checksum of the module. If the module has native code loaded, this will be the MD5 of the native code, not the BEAM bytecode.<br />
exports<br />
<br />
Returns a list of {Name,Arity} tuples with all exported functions in the module.<br />
functions<br />
<br />
Returns a list of {Name,Arity} tuples with all functions in the module.<br />
nifs<br />
<br />
Returns a list of {Name,Arity} tuples with all NIF functions in the module.<br />
native<br />
<br />
Return true if the module has native compiled code. Return false otherwise. In a system compiled without HiPE support, the result is always false<br />
</p>
"	
"<p>How to use variable substitution within a string?</p>
"	"<pre><code>&quot;Hello, #{name}&quot;</code></pre>
"	
"<p>What is ""With"" expression syntax?</p>
"	"<p>with expression1,</p>
<div>
<p>       expression2</p>
</div>
<div>
<p>       .</p>
</div>
<div>
<p>       .</p>
</div>
<div>
<p>       expressionn</p>
</div>
<div>
<p>do</p>
</div>
<div>
<p>      statement</p>
</div>
<div>
<p>else</p>
</div>
<div>
<p>     statement</p>
</div>
<div>
<p>end</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p>where expression can be one of the following format:</p>
</div>
<div>
<p>  1. a &lt;- function_call</p>
</div>
<div>
<p>  2. a = function_call</p>
</div>
"	
"<p>What does <code>send</code> do? What are its arguments?</p>
"	"<p>It sends a message to the given destination:</p>
<pre><code>send(dest, message) :: message</code></pre>
<p><code>dest</code> can be one of the following:</p>
<ul>
<li>remote or local PID</li>
<li>local port</li>
<li>a locally registered name (represented by an atom)</li>
<li>a tuple of the form <code>{registered_name, node}</code> for a registered name at another node</li>
</ul>
<p><br />
<code>message</code> can be any term.</p>
"	
"<p>How to change process limit for BEAM?</p>
"	"<p>Use <code>erl</code>'s option <code>+P</code>.</p>
"	
"<p>How do you list the location of beam file for a particular Elixir/Erlang module?</p>
"	"<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex&gt; :code.which String        &#39;/usr/
local/Cellar/elixir/1.6.4/bin/../lib/elixir/ebin/Elixir.String.beam&#39;</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
"	
"<p>What's the difference between erl's <code>-name</code> and <code>-sname</code>?</p>
"	"<p>When we have two nodes on the same machine, we use “short” names (as indicated by the <code>-sname</code> flag), but if they are on different networks, we use <code>-name</code>. We can also use <code>-sname</code> on two different machines when they are on the same subnet. Using <code>-sname</code> is also the only method that will work if no DNS service is available. Short name will append localhost, e.g. <code>-sname gandalf</code> will give <code>gandalf@localhost</code>.</p>
"	
"<p>There are two ways to start a supervisor, a module-based approach (<em>start_link(module, init_arg, options \\ [])</em>) where you implement the Supervisor bevahior in the module and a function based approach where you call, <em>Supervisor.start_link(children, options)</em> passing the children. What is the difference?</p>
"	"<p>This is the function based approach:</p>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>children = [    %{         id: Stack,         start: {
Stack, :start_link, [[:hello]]} }  ]  {:ok, pid} = Supervisor.start_l
ink(children, strategy: :one_for_one) Supervisor.count_children(pid)</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>And this is the Module-based approach:</p>
</div>
<div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>defmodule MyApp.Supervisor do   # Automatically defines child_sp
ec/1   use Supervisor    def start_link(init_arg) do     Supervisor.s
tart_link(__MODULE__, init_arg, name: __MODULE__)   end    @impl true
   def init(_init_arg) do     children = [       {Stack, [:hello]}
  ]      Supervisor.init(children, strategy: :one_for_one)   end end</code></pre>
</div></td>
</tr>
</tbody>
</table>
</div>
<div>
<div>
<p>The difference between the two approaches is that a module-based supervisor gives you more direct control over how the supervisor is initialized. Instead of calling <em>Supervisor.start_link/2</em> with a list of children that are automatically initialized, we manually initialized the children by calling <em>Supervisor.init/2</em> inside its <em>init/1</em> callback.</p>
</div>
<div>
<p><em>use Supervisor</em> also defines a <em>child_spec/1</em> function which allows us to run <em>MyApp.Supervisor</em> <strong>as a child of another supervisor</strong> or at the top of your supervision tree as:</p>
</div>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>children = [   MyApp.
Supervisor ] Supervisor.start_link(children, strategy: :one_for_one)</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>A general guideline is to use the supervisor without a callback module <strong>only at the top of your supervision tree</strong>, generally in the <em>Application.start/2</em> callback. We recommend using module-based supervisors for any other supervisor in your application, so they can run as a child of another supervisor in the tree.<br />
</p>
</div>
</div>
"	
"<p>config/config.exs file looks like this:</p>
<div>
<p><br />
</p>
</div>
<div>
<div>
<div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>use Mix.Confi
g config :todo, http_port: 5454 ... import_config &quot;#{Mix.env()}.exs&quot;</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>What does the <em>import_config</em> macro do?</p>
</div>
</div>
</div>
</div>
"	"<div>
<div>
<div>
<p>The expression import_config ""<em>#{Mix.env()}.exs</em>"" imports the configuration specific to the current mix environment. To do that, you use the <em>Mix.env/0</em> function, which returns the mix environment as an atom (:dev, :test, or :prod). For example,</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p>In config/test.exs,</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<div>
<div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>use Mix.Config config :todo, http_port: 5455</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
<div>
<p>Let’s quickly verify if this works. Start the application in the default dev environment:</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>$ iex -S mix iex(1)&gt; Application.get_env(:todo, :http_port) 5454</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
<div>
<p>Now, try the same in the test environment:</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>$ MIX_ENV
=test iex -S mix iex(1)&gt; Application.get_env(:todo, :http_port) 5455</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
</div>
</div>
</div>
</div>
</div>
"	
"<div>
<p>Elixir allows you to define you child_spec as part of your module if you don't want to use the default child_spec provided by 'use GenServer' like below: <br />
</p>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>defmodule Stac
k do   use GenServer    def start_link(state) do     GenServer.start_
link(__MODULE__, state, name: __MODULE__)   end      def child_spec(a
rg) do    %{      id: Stack,      start: {Stack, :start_link, [arg]}
    }   end    ## Callbacks    @impl true   def init(stack) do     {:
ok, stack}   end    @impl true   def handle_call(:pop, _from, [head |
 tail]) do     {:reply, head, tail}   end    @impl true   def handle_
cast({:push, head}, tail) do     {:noreply, [head | tail]}   end end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>How do you override this child spec when starting the supervisor?</p>
</div>
<div>
<div>
<div>

</div>
</div>
</div>
"	"<div>
<div>
<div>
<div>
<p>If you need to convert a tuple or a module child specification to a map or modify a child specification, you can use the Supervisor.child_spec/2 function. For example, to run the stack with a different :id and a :shutdown value of 10 seconds (10_000 milliseconds):</p>
</div>
<div>
<p><br />
</p>
</div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>child
ren = [ Supervisor.child_spec({Stack, [:hello]}, id: MyStack, shutdow
n: 10_000) ] Supervisor.start_link(children, strategy: :one_for_one]</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
</div>
</div>
"	
"<p>What's Elixir's anonymous function format?</p>
"	"<pre><code>fn
  parameter_list -&gt; body
  parameter_list -&gt; body
end</code></pre>
"	
"<p>When creating an ETS table you provide a table name as atom eventhough you still need to use the reference for table access like below:</p>
<div>
<p><br />
</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(2)&gt; table=:ets.new(:my_table, [
]) #Reference&lt;0.4030288514.1534984196.194401&gt; iex(3)&gt; :ets.insert(tab
le, {:key_1,1}) true iex(4)&gt; :ets.insert(table, {:key_2,%{name: &quot;mike
&quot;, city: &quot;boston&quot; }}) true iex(5)&gt; :ets.lookup(table, :key_2)
                            [key_2: %{city: &quot;boston&quot;, name: &quot;mike&quot;}]</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>What's the purpose of :my_table?</p>
</div>
"	"<div>
<div>
<div>
<div>
<p>This argument must be an atom, and by default it serves no purpose but it's still required. You can create multiple tables with the same name, and they’re still different tables.</p>
</div>
<div>
<p>But if you provide a <strong>:named_table</strong> option, the table becomes accessible via its name and trying to create a duplicate named table will result in an error:</p>
</div>
</div>
</div>
</div>
<div>
<div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(1)&gt; :ets.new(:my_table
, [:named_table])  :my_table iex(2)&gt; :ets.insert(:my_table, {:key_1,
3}) true iex(3)&gt; :ets.lookup(:my_table, :key_1)  [key_1: 3] iex(4)&gt; :
ets.new(:my_table, [:named_table])  ** (ArgumentError) argument error</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
</div>
</div>
<div>
<div>
<p><br />
</p>
</div>
</div>
<div>
<div>
<div>
<p>In this sense, a table name resembles a locally registered process name. It’s a symbolic name of a table, and it relieves you of having to pass around the ETS reference </p>
</div>
</div>
</div>
"	
"<p>What is a supervisor and supervision tree?</p>
"	"<p>A supervisor is a process which supervises other processes, which we refer to as child processes. Supervisors are used to build a hierarchical process structure called a supervision tree. Supervision trees provide fault-tolerance and encapsulate how our applications start and shutdown.</p>
"	
"<p>Why GC is fast in Elrang/Elixir?</p>
"	"<p>Erlang processes are completely isolated and share no memory. This allows per-process garbage collection: instead of stopping the entire system, each process is individually collected as needed. Such collections are much quicker and don’t block the entire system for long periods of time. In fact, in a multicore system, it’s possible for one CPU core to run a short garbage collection while the remaining cores are doing standard processing.</p>
"	
"<p>List <code>cowboy</code> stream handlers.</p>
"	"<ul>
<li><code>cowboy_stream_h</code> - Default stream handler</li>
<li><code>cowboy_compress_h</code> - Compress stream handler</li>
<li><code>cowboy_metrics_h</code> - Metrics stream handler</li>
<li><code>cowboy_tracer_h</code> - Tracer stream handler</li>
</ul>
"	
"<p>What is the execution window for Erlang processes?</p>
"	"<p>~2000 reductions (function calls).</p>
"	
"<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>In the following code, why is the ets table wra
pped in GenServer? and why there&#39;s no callback code for get and put?d
efmodule ETSKeyValue do  use GenServer   def start_link() do   GenSer
ver.start_link(__MODULE__, nil, name: __MODULE__)  end   def init(_)
do   :ets.new(__MODULE__, [:named_table, :public, write_concurrency:
true])   {:ok, nil}  end   def put(key, value) do   :ets.insert(__MOD
ULE__, {key, value})  end   def get(key) do   case :ets.lookup(__MODU
LE__, key) do    [{^key,value}] -&gt; value    [] -&gt; nil   end  end end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
<p><br />
</p>
"	"<p>1. An ETS table is deeply connected to its owner process (by default, the process that created the table). If the owner process terminates, the ETS table is reclaimed. So the sole purpose of this GenServer process is to keep the table alive. </p>
<div>
<p>2. get and put operations now don’t go through the server process. This means that multiple clients can work with the key/value store simultaneously, without blocking each other </p>
</div>
"	
"<p>How do you get the application configuration? For example, assume you have a <em>:todo</em> app that has a <em>:http_port</em> configured in config file. How do you access this variable in your code?</p>
"	"<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(1)&gt; Application.fetch_env!(:todo, :http_port) 5454</code></pre>
</div></td>
</tr>
</tbody>
</table>
<div>
<div>
<div>
<div>
<p>The most typical way of setting an application environment is to use the <em>config/config.exs</em> file. You can specify various environment settings in that file, and these settings will be loaded before the OTP application is started. The <em>config.exs</em> file is a script that’s evaluated by the mix tool when compiling the project and starting the application. As soon as you start the system, this setting is available in the application environment, and you can retrieve it </p>
</div>
</div>
</div>
</div>
"	
"<p>How to print in a console in Erlang?</p>
"	"<p><code>io.format(""~p~n"", [SomeValue]).</code><br />
<br />
Todo, what is ~p and other values</p>
"	
"<p>What is an Agent?</p>
"	"<p>Agents are a simple abstraction around state. Often in Elixir there is a need to share or store state that must be accessed from different processes or by the same process at different points in time. The Agent module provides a basic server implementation that allows state to be retrieved and updated via a simple API. Here is an example of simple counter implemented as an Agent:<br />
<br />
</p>
<pre><code>defmodule Counter do
  use Agent

  def start_link(initial_value) do
    Agent.start_link(fn -&gt; initial_value end, name: __MODULE__)
  end

  def value do
    Agent.get(__MODULE__, &amp; &amp;1)
  end

  def increment do
    Agent.update(__MODULE__, &amp;(&amp;1 + 1))
  end
end</code></pre>
"	
"<p>Explain <code>{badarity,F}</code> - <code>BadArityError</code> error.</p>
"	"<p>A function is applied to the wrong number of arguments. <code>F</code> describes the function and the arguments.</p>
"	
"<p>Given the PID of a process, how do you force it to exit?</p>
"	"<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex&gt;Process.exit(pid, :kill)
true</code></pre>
</div>
<br />
</td>
</tr>
</tbody>
</table>
<p><br />
   </p>
"	
"<p>How does BEAM avoid deadlocks and process starvation?</p>
"	"<p>Elrang's scheduler is preemptive—it gives a small execution window to each process and then pauses it and runs another process. Because the execution window is small, a single long-running process can’t block the rest of the system. Furthermore, I/O operations are internally delegated to separate threads, or a kernel-poll service of the underlying OS is used if available. This means any process that waits for an I/O operation to finish won’t block the execution of other processes.</p>
"	
"<p>Explain try catch syntax in Elixir</p>
"	"<p><code>try do ... catch type, value -&gt; ... end</code></p>
"	
"<p>We know that Kernel.spawn_link spawns a process and links the parent and child. How do we connect two independent processes?</p>
"	"<p>Process.link/1 creates a link between the calling process and the given item (process or port).</p>
<div>
<p>Links are bidirectional. Linked processes can be unlinked by using unlink/1.</p>
</div>
"	
"<p>What is the default primary key in an Ecto model?</p>
"	"<p>NOTE: by using Ecto.Schema, an :id field with type :id (:id means :integer) is generated by default, which is the primary key of the Schema. If you want to use a different primary key, you can declare custom @primary_key before the schema/2 call. Consult the Ecto.Schema documentation for more information.</p>
"	
"<p>Explain <code>{nocatch,V}</code> error (Erlang).</p>
"	"<table>
<tbody>
<tr class=""odd"">
<td style=""text-align: left;"">Trying to evaluate a <span style=""background-color: rgb(243, 243, 243);"">throw </span>outside a <span style=""background-color: rgb(243, 243, 243);"">catch</span>. <span style=""background-color: rgb(243, 243, 243);"">V</span> is the thrown term.</td>
</tr>
</tbody>
</table>
"	
"<p>What is the output here and why?</p>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(node1@localhost)&gt; Nod
e.spawn( :node2@localhost, fn -&gt; IO.puts(&quot;Hello from #{node}&quot;) end )</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
"	"<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>Hello from node2@localhost #PID&lt;11132.128.0&gt;</code></pre>
</div></td>
</tr>
</tbody>
</table>
<div>
<div>
<div>
<div>
<div>
<p>Even though the lambda has been executed on node2, the output is printed in the shell of node1. All standard I/O calls (such as IO.puts/1) are forwarded to the group leader — a process that’s in charge of performing the actual input or output. A spawned process inherits the group leader from the process that spawned it, even when you’re spawning a process on another node. Therefore, your process may run on node2, but its group leader is still on node1. As a consequence, the string to be printed is created on node2 (as the string con- tents prove), but the output is printed on node1.</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p>This code won't print anything on node1 as there's no IO calls involved,</p>
</div>
<div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(node1@localhost)&gt;Node.spawn(:&quot;node2@al
ice-mbp&quot;, fn-&gt; &quot;Hello from #{node()}&quot; end)          #PID&lt;11132.129.0&gt;</code></pre>
</div></td>
</tr>
</tbody>
</table>
</div>
<p><br />
</p>
</div>
</div>
</div>
</div>
</div>
"	
"<div>
<div>
<div>
<div>
<p>When you start your BEAM instance with the --hidden argument, the node isn’t seen in other nodes’ connected lists (and vice versa). In what scenario, this is useful?</p>
</div>
</div>
</div>
</div>
"	"<div>
<div>
<div>
<div>
<p>A simple example is starting a local node that acts as a remote shell to another node. Another example is an instrumentation tool -- a node that connects to another node, collects all sorts of metrics from it, and presents the results in a GUI.</p>
</div>
<div>
<p>Such nodes are helpers that shouldn’t be part of the cluster, and you usually don’t want them to be seen as such. For this purpose, you can make a hidden connection </p>
</div>
</div>
</div>
</div>
"	
"<p>Name one popular library used for pooling.</p>
"	"<p>Poolboy.</p>
"	
"<p>What is the <code>alias</code> directive's syntax?</p>
"	"<pre><code>alias module_name, as: shortname</code></pre>
"	
"<p>How to view the source code of a particular function?</p>
"	"<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex&gt; open Tuple.to_list</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
<div>
<p>will open the source code in a text editor</p>
</div>
"	
"<p>Explain Phoenix layers.</p>
"	"<pre><code>connection
  |&gt; endpoint()
  |&gt; router()
  |&gt; pipelines()
  |&gt; controller()</code></pre>
<p><br />
Each request comes in through an endpoint, the first point of contact. It’s literally the end, or the beginning, of the Phoenix world. A request comes into an endpoint. From there, requests go into our router layer, which directs a request into the appropriate controller, after passing it through a series of pipelines. As you might expect, a pipeline groups functions together to handle common tasks. You might have a pipeline for browser requests, and another for JSON requests.</p>
"	
"<p>List and briefly explain <code>cowboy</code> functions to start and stop the server.</p>
"	"<p>To start the server, one can use <code>cowboy:start_clear</code> (for plain TCP) and <code>cowboy:start_tls</code> (for connections using TLS). Both functions accept name for the server, as well options for transport (Ranch options) and protocol (such as <code>[{port, 8080}]</code>). Server can be stopped using <code>cowboy:stop_listener</code>.</p>
"	
"<p>True or False: ETS is not an OTP process like GenServer</p>
"	"<p>true. ETS table is a separate memory-data structure where you can store Erlang terms. An ETS table is deeply connected to its owner process (by default, the process that created the table). <strong>If the owner process terminates, the ETS table is reclaimed</strong>.  <br />
</p>
"	
"<p>How to compile and run <code>hello.erl</code> file and run <code>start</code> function from shell?</p>
"	"<p><code>erlc hello.erlerl -noshell -s hello start -s init stop</code></p>
"	
"<p>How to get head and tail of a list in Elixir?</p>
"	"<p>Use <code>hd/1</code> and <code>tl/1</code> BIFs.</p>
"	
"<p>What is <code>Kernel</code> module?</p>
"	"<p><code>Kernel</code> is Elixir's default environment.<br />
It mainly consists of:<br />
</p>
<ul>
<li>basic language primitives, such as arithmetic operators, spawning of processes, data type handling, and others</li>
<li>macros for control-flow and defining new functionality (modules, functions, and the like)</li>
<li>guard checks for augmenting pattern matching</li>
</ul>
"	
"<p>Explain <code>undef</code> error (<code>UndefinedFunctionError</code>).</p>
"	"<p>It means that the function cannot be found when evaluating a function call.</p>
"	
"<p>How does catch primitive work?</p>
"	"<p>When an exception occurs within a catch statement, it is converted into an {'EXIT', ...} tuple that describes the error.</p>
"	
"<p>List <code>cowboy</code> middlewares.</p>
"	"<ul>
<li><code>cowboy_router</code> - Router middleware</li>
<li><code>cowboy_handler</code> - Plain HTTP handler</li>
</ul>
"	
"<p>What does `receive` macro do?</p>
"	"<p>Checks if there's a message matching the given clauses exists in the process's mailbox. If none such messages exist, then the process hangs until a message arrives or the given timeout.</p>
<p><br />
</p>
<div class=""codehilite"" style=""background: #f8f8f8"" data-align=""left"">
<pre style=""line-height: 125%""><code>defmodule Spawn1 do
  def greet do
    receive do
      {sender, msg} -&gt; send (sender, { :ok, &quot;Hello, #{msg}&quot; })
    end
  end
end

# here&#39;s a child
pid = spawn(Spawn1, :greet, [])
send (pid, {self(), &quot;World!&quot;})

receive do
  {:ok, message} -&gt; IO.puts message
end</code></pre>
</div>
<p><br />
</p>
<p>An optional after clause can be given in case the message was not received<br />
<br />
after the given timeout period, specified in milliseconds</p>
<p><br />
</p>
<div class=""codehilite"" style=""background: #f8f8f8"" data-align=""left"">
<pre style=""line-height: 125%""><code>receive do
      {:selector, i, value} when is_integer(i) -&gt; value
      value when is_atom(value) -&gt; value
      _ -&gt; IO.puts :stderr, &quot;Unexpected message received&quot;
      after 5000 -&gt; IO.puts :stderr, &quot;No message in 5 seconds&quot;
end</code></pre>
</div>
"	
"<p>Name two caveats to using <code>Task.async/1</code>.</p>
"	"<p>There are two important things to consider when using async:<br />
<br />
</p>
<ul>
<li>If you are using async tasks, you must await a reply as they are always sent. If you are not expecting a reply, consider using <code>Task.start_link/1</code> as detailed below.</li>
<li>async tasks link the caller and the spawned process. This means that, if the caller crashes, the task will crash too and vice-versa. This is on purpose: if the process meant to receive the result no longer exists, there is no purpose in completing the computation.</li>
</ul>
<p><br />
<br />
If this is not desired, you will want to use supervised tasks.</p>
"	
"<p>What is most common purpose of Elixir's tasks?</p>
"	"<p>Tasks are processes meant to execute one particular action throughout their lifetime, often with little or no communication with other processes. The most common use case for tasks is to convert sequential code into concurrent code by computing a value asynchronously:<br />
</p>
<pre><code>task = Task.async(fn -&gt; do_some_work() end)
res = do_some_other_work()
res + Task.await(task)</code></pre>
<p><br />
Tasks spawned with async can be awaited on by their caller process (and only their caller) as shown in the example above. They are implemented by spawning a process that sends a message to the caller once the given computation is performed.<br />
<br />
Besides <code>async/1</code> and <code>await/2</code>, tasks can also be started as part of a supervision tree and dynamically spawned on remote nodes. We will explore these scenarios next.</p>
"	
"<p>What is a basic concurrency primitive in Erlang?</p>
"	"<p>Elrang process. Erlang can run millions of such processes. BEAM uses its own schedulers to distribute the execution of processes over the available CPU cores, thus parallelizing execution as much as possible.</p>
"	
"<p>List &amp; explain Elixir's system types.</p>
"	"<ul>
<li>PIDs</li>
<li>Ports</li>
<li>References</li>
</ul>
"	
"<p>Explain try-catch syntax in Erlang.</p>
"	"<p><img src=""img7853868083437059736.jpg"" /><br />
<br />
Example:<br />
<br />
<img src=""img2734561429400882572.jpg"" /></p>
"	
"<p>Explain <code>if_clause</code> - <code>CondClauseError</code> error.</p>
"	"<p>No true branch is found when evaluating an <code>if/cond</code> expression.</p>
"	
"<p>How do you compile code for prod environment?</p>
"	"<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>$&gt;MIX_ENV=prod mix compile</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
"	
"<p>How do you list all behavior callbacks from a Module?</p>
"	"<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex&gt;b GenServer</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
"	
"<p>How do you list a visible nodes in the VM?</p>
"	"<div class=""codehilite"" style=""background: #f8f8f8"" data-align=""left"">
<pre style=""line-height: 125%""><code>iex(node1@katbookpro)10&gt; Node.list [:node2@katbookpro] </code></pre>
</div>
"	
"<p>How to send data to a process? (Elixir)</p>
"	"<p>Use <code>Kernel.send/2</code>, e.g.:<br />
<br />
<code>send(pid, {:an, :arbitrary, :term})</code></p>
"	
"<p>How do you compile code for production and start the app using mix?</p>
"	"<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>$&gt; MIX_ENV=Prod iex -S mix</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
"	
"<p>Which ones can be rescued and which can be caught in Elixir?<br />
<br />
Erlang error, exception, throw, exit</p>
"	"<p>Rescued: Erlang error (as ErlangError) and exceptions<br />
Caught: all</p>
"	
"<p>How to unbind a variable in erl?</p>
"	"<p>Use <code>f(X)</code> or <code>f()</code>.</p>
"	
"<p>What is Inspect protocol?</p>
"	"<p>The <code>Inspect</code> protocol is responsible for converting any Elixir data structure into an algebra document. This document is then formatted, either in pretty printing format or a regular one.</p>
<p>The <code>inspect/2</code> function receives the entity to be inspected followed by the inspecting options, represented by the struct Inspect.Opts.</p>
<p>Many times, inspecting a structure can be implemented in function of existing entities. For example, here is MapSet’s inspect implementation:</p>
<div class=""codehilite"" style=""background: #f8f8f8"" data-align=""left"">
<pre style=""line-height: 125%""><code>defimpl Inspect, for: MapSet do   import Inspect.Algebra    def inspect(dict, opts) do     concat([&quot;#MapSet&lt;&quot;, to_doc(MapSet.to_list(dict), opts), &quot;&gt;&quot;])   end end </code></pre>
</div>
<div class=""codehilite"" style=""background: #f8f8f8"" data-align=""left"">
<pre style=""line-height: 125%""><code>iex(20)&gt; inspect a &quot;#MapSet&lt;[\&quot;abc\&quot;, \&quot;def\&quot;, \&quot;ghi\&quot;]&gt;&quot; </code></pre>
</div>
"	
"<p>What is the use of underscore (<code>_</code>) in pattern matching?</p>
"	"<p><code>_</code> acts like a wildcard, i.e. it accepts anything.</p>
"	
"<p>How do you create a long running, stateful server without Genserver?</p>
"	"<div>
<div>
<div>
<div>
<p>In particular, all code that implements a server process needs to do the following:</p>
</div>
<div>
<p>* Spawn a separate process<br />
* Run an infinite loop in the process </p>
</div>
<div>
<p>* Maintain the process state<br />
* React to messages<br />
* Send a response back to the caller </p>
</div>
<div>

</div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>defmodule TodoApp do   def start() do     #1. Spawn a separate proces
     spawn(fn -&gt; TodoList.new |&gt; loop() end)   end    def add_entry(p
id, %{}=item) do     send(pid, {:add_todo, item})   end    def entrie
s(pid, %Date{}=date) do     send(pid,{:get_entries, self(), date})
  receive do       {:entries, value} -&gt;         value     end    end
   def loop(state) do     # 3. Maintain the process state (by capturi
ng creaing new state)     new_state =       receive do         # 4. R
eact to messages         {:add_todo, value} -&gt; TodoList.add_entries(s
tate, value)         {:get_entries, caller, date} -&gt;             #5.
Send a response back to the caller             send(caller, {:entries
, TodoList.entries(state, date)})             state       end     # 2
. Run an infinite loop in the process      loop(new_state)   end end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
</div>
</div>
"	
"<p>What is ExUnit?</p>
"	"<p>ExUnit is a test-unit based framework that ships with Elixir.</p>
"	
"<p>Explain <code>function_clause</code> - <code>FunctionClauseError</code> error.</p>
"	"<table>
<tbody>
<tr class=""odd"">
<td style=""text-align: left;"">No matching function clause is found when evaluating a function call.</td>
</tr>
</tbody>
</table>
"	
"<p>what happens when you run the following code? </p>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>spawn_link fn -&gt; raise &quot;oops&quot; end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
"	"<p>an errors is logged and the parent process dies.</p>
"	
"<p>Explain what does it mean that Phoenix is a function?</p>
"	"<p>When a user makes a request, a connection is established.<br />
In Phoenix, that connection is the whole universe of things we need to know about a user’s request. It is a struct, which is a map with a known set of fields. The connection comes in with information about the request: whether it’s HTTP or HTTPS, what the URL is, what the parameters look like. Then, each layer of Phoenix (Phenix function-pipiline) makes a little change to that connection. When Phoenix is done, that connection will have the response in it.<br />
<br />
<code>connection |&gt; phoenix</code></p>
"	
"<p>What is BEAM?</p>
"	"<p>Erlang's virtual machine Bogdan/Björn’s Erlang Abstract Machine.<br />
<br />
BEAM is the virtual machine at the core of the Erlang Open Telecom Platform (OTP). BEAM is part of the Erlang Run-Time System (ERTS), which compiles Erlang source code into bytecode, which is then executed on the BEAM. BEAM bytecode files have the <code>.beam</code> file extension.<br />
<br />
Originally BEAM was short for Bogdan's Erlang Abstract Machine, named after Bogumil ""Bogdan"" Hausman, who wrote the original version, but the name may also be referred to as Björn's Erlang Abstract Machine, after Björn Gustavsson, who wrote and maintains the current version. Both developers worked on the system while at Ericsson. The predecessor of the BEAM was JAM (Joe's Abstract Machine), which was the first virtual machine for the Erlang language and was written by Joe Armstrong.</p>
"	
"<p>What must initializer function for a supervised process (<code>start_link/1</code> by default) return?</p>
"	"<p>The <code>start_link/1</code> function must return <code>{:ok, pid}</code> where pid is the process identifier of a new process that is linked to the supervisor.</p>
"	
"<p>How do you call an Erlang function from Elixir?</p>
"	"<p>Using the following syntax:</p>
<pre><code>:module.function()</code></pre>
<p>For example:</p>
<pre><code>:erlang.system_info(:process_count)</code></pre>
"	
"<p>Why is System.stop/0 is better than Application.stop/1?</p>
"	"<p><code>Application.stop/1</code> stops only the specified application, leaving dependencies (other applications) running. To stop the entire system in a controlled way, you can invoke <code>System.stop/0</code>. This function will take down all the OTP applications, and then the BEAM instance itself. Both <code>Application.stop/1</code> and <code>System.stop/0</code> work in a polite way - every process in the supervision tree can perform some final cleanup in its <code>terminate/1</code> callback.</p>
"	
"<p>What is process registry?</p>
"	"<p>You need a way to give symbolic names to supervised processes and access each process via this name. When a process is restarted, the successor will register itself under the same name, which will allow you to reach the right process even after multi-ple restarts.<br />
You could use registered names for this purpose. The problem is that names can only be atoms, and in this case you need something more elaborate that will allow you to use arbitrary terms, such as {:database_worker, 1}, {:database_worker, 2}, and so on.<br />
What you need is a process registry that maintains a key-value map, where the keys are names and the values are pids. A process registry differs from standard local registration in that names can be arbitrarily complex.</p>
"	
"<p>How to receive a message? (Elixir)</p>
"	"<p>Via <code>receive</code> block, e.g.:</p>
<pre><code>  receive do
    message -&gt;
      IO.inspect(message)
    after 5000 -&gt;
      IO.puts(&quot;message not received&quot;)
  end </code></pre>
"	
"<p>Why try catch blocks are dangerous from memory point of view?</p>
"	"<p>Because function calls in try block cannot use tail calls.</p>
"	
"<p>Which error will be raised if throw is not caught?</p>
"	"<p><code>{:nocatch, value}</code></p>
"	
"<p>How to use Erlang's documentation?</p>
"	"<div>
<p>Erlang/OTP documentation is divided into ""System Documentation"" and module documentation (grouped by applications). System documentation consists of Erlang Reference Manual and other article-like docs such as Getting Started, Programming Examples as well as Design Principles or Efficiency Guide. Module documentation documents specific functions within modules.<br />
</p>
</div>
"	
"<p>How to compile a Mix project, run it and execute and expression in one command?</p>
"	"<pre><code>mix run -e &#39;expression&#39;</code></pre>
"	
"<p>What is <code>&amp;</code> operator called? And what are the two uses?</p>
"	"<p><code>&amp;</code> can turn a function into an anonymous functions which can be passed as arguments to other function or be bound to a variable:</p>
<pre><code>speak = &amp;(IO.puts/1)
speak.(&quot;hello&quot;)</code></pre>
<p>Alternatively, it can be used a shorthand operator to create anonymous functions:</p>
<pre><code>add_one = &amp;(&amp;1 + 1)
add_one.(1)</code></pre>
<p>which is same as <code>add_one = fn x -&gt; x + 1 end</code>.</p>
"	
"<p>What is the purpose of <code>@impl</code> before behavior callback?</p>
"	"<p>The <code>@impl</code> tells the compiler that the function about to be defined is a callback function and therefore should satisfy behavior contract. If it doesn't conform, you will get a compile-time warning.</p>
"	
"<p>How do you find a PID of a registered process? For example, a process registered under the name <code>KeyValueStore</code>?</p>
"	"<pre><code>iex(1)&gt; pid = Process.whereis(KeyValueStore)
#PID&lt;0.229.0&gt;</code></pre>
"	
"<p>Here's a Simple GenServer behavior implementation:</p>
<div>
<div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>defmodule KeyValueStore do</code></pre>
<pre style=""line-height: 125%""><code> use GenServer  def init(_) do   {:ok,%{}}  end</code></pre>
<pre style=""line-height: 125%""><code> def handle_cast({:
put, key, value}, map) do   {:noreply, Map.put(map, key, value)}  end</code></pre>
<pre style=""line-height: 125%""><code> def handle
_call({:get, key}, _, map) do   {:reply, Map.get(map, key), map}  end</code></pre>
<pre style=""line-height: 125%""><code>####INTERFACE FUNCTIONS######</code></pre>
<pre style=""line-height: 125%""><code> de
f start() do   {:ok, pid}=GenServer.start(__MODULE__, nil)   pid  end</code></pre>
<pre style=""line-height: 125%""><code> def set(server_pid,
key, value ) do   GenServer.cast(server_pid, {:put, key, value})  end</code></pre>
<pre style=""line-height: 125%""><code> def get(se
rver_pid, key) do   GenServer.call(server_pid, {:get, key})  end end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>How do you convert it to a <strong>Supervised</strong> server?</p>
</div>
</div>
</div>
"	"<p>1. Change the interface function start to start_link/1 that takes one argument and ignore it. This is because when the supervisor starts it calls start_link/1 in child modules</p>
<div>
<p><br />
</p>
<div>
<p>2. Change GenServer.start/3 to <strong>GenServer.start_link/3</strong> to start the GenServer as a linked process to the current process.</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p>3. Finally, in the client code, call Supervisor.start_link/2:<br />
</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>Supervisor.start_link([KeyValueStore], strategy: :one_for_one)</code></pre>
</div></td>
</tr>
</tbody>
</table>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>defmodule KeyValueStore do   use GenServer    def
 init(_) do     {:ok,%{}}   end    def handle_cast({:put, key, value}
, map) do     {:noreply, Map.put(map, key, value)}   end    def handl
e_call({:get, key}, _, map) do     {:reply, Map.get(map, key), map}
 end    def start_link(_) do     GenServer.start_link(__MODULE__, nil
, name: __MODULE__)   end    def set(server_pid, key, value ) do
GenServer.cast(server_pid, {:put, key, value})   end    def get(serve
r_pid, key) do     GenServer.call(server_pid, {:get, key})   end end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
</div>
</div>
"	
"<p>Which type of GenServer call promotes back-pressure: call/3 or cast/2?</p>
"	"<div>
<div>
<div>
<div>
<p>Because a <strong>call/3</strong> blocks a client, it prevents the client from generating too much work. The client becomes synchronized with the server and can never produce more work than the server can handle. In contrast, if you use <strong>cast/2</strong>, clients may overload the server, and requests may pile up in the message box and consume memory. Ultimately, you may run out of memory, and the entire VM may be terminated. </p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<div>
<div>
<div>
<div>
<p>Obviously, when a client needs a response, you should use calls. The main problem with a cast is that it’s a fire-and-forget kind of request, so the caller doesn’t get any guarantees. You can’t be sure that the request has reached the target, and you most certainly don’t know about its outcome. </p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
"	
"<p>How to extract process' state for debugging?</p>
"	"<p><code>:sys.get_state(Name)</code></p>
"	
"<p>As a library author why is it a bad idea to use Application environment(config/config.exs) for configuration?</p>
"	"<div>
<div>
<div>
<p>Scripts such as config.exs, or environment-specific ones like dev.exs, are evaluated before the project is compiled and started. This means you’re limited in what you can do in such scripts. On top of that, the application environment is <strong>global</strong> which means it becomes impossible for two dependencies to use your library in two different ways.</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p>Let's see a simple example. Imagine that you implement a library that breaks a string in two parts based on the first occurrence of the dash ""-"" character:<br />
</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>defmodule DashSplitter do   def split(string) when is
_binary(string) do     String.split(string, &quot;-&quot;, parts: 2)   end end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>Now imagine someone wants to split the string in three parts. You decide to make the number of parts configurable via the application environment:<br />
</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>defmodule DashSplitter do</code></pre>
<pre style=""line-height: 125%""><code>  def split(strin
g) when is_binary(string) do     parts = Application.get_env(:dash_sp
litter, :parts, 2)     String.split(string, &quot;-&quot;, parts: parts)   end</code></pre>
<pre style=""line-height: 125%""><code>end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<div>
<p>Now users can configure your library in their config/config.exs file as follows:</p>
</div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>config :dash_splitter, :parts, 3</code></pre>
</div></td>
</tr>
</tbody>
</table>
<div>
<p>Once your library is configured, it will <strong>change the behaviour of all users of your library.</strong> If a library was expecting it to split the string in 2 parts, since the configuration is global, it will now split it in 3 parts.</p>
</div>
<div>
<p>The solution is to provide configuration as close as possible to where it is used and not via the application environment. </p>
</div>
</div>
</div>
</div>
"	
"<p>What is railway-oriented programming? How do you achieve that with Elixir?</p>
"	"<p>It is a clean, functional approach to error handling where the happy path follows success path and failure path follows error path. In elixir it can be achieved using <code>with</code> operator</p>
<p>Previously, one would write</p>
<div class=""codehilite"" style=""background: #f8f8f8"" data-align=""left"">
<pre style=""line-height: 125%""><code>case File.read(&quot;my_file.ex&quot;) do   {:ok, contents} -&gt;     case Code.eval_string(contents) do       {res, _binding} -&gt;         {:ok, res}       error -&gt;         error   error -&gt; error     error end </code></pre>
</div>
<p>such can now be rewritten as</p>
<div class=""codehilite"" style=""background: #f8f8f8"" data-align=""left"">
<pre style=""line-height: 125%""><code>with {:ok, contents} &lt;- File.read(&quot;my_file.ex&quot;),      {res, binding} &lt;- Code.eval_string(contents),      do: {:ok, res} </code></pre>
</div>
<p>Every statement of with is executed in order. Execution continues as long as left &lt;- right match. As soon as a match fails, the else block is executed. Within the else block we can match against whatever WAS returned. If all statements match, the do block is executed and has access to all the local variables in the with block.</p>
"	
"<p>What is the use of <code>&amp;(...)</code> syntax?</p>
"	"<p><code>&amp;(...)</code> is a shortcut for creating anonymous functions. Inside that expression, the placeholders <code>&amp;1</code>, <code>&amp;2</code> and so on correspond to the first, second and subsequent parameters of the function. For example:</p>
<pre><code>&amp;((&amp;1 + &amp;3) * &amp;2)</code></pre>
<p><br />
</p>
"	
"<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>i
ex(12)&gt; spawn_link(fn -&gt; Process.sleep(4000); IO.puts(&quot;ending&quot;) end)
 iex(13)&gt; spawn_link(fn -&gt; Process.sleep(4000); raise(&quot;ending&quot;) end)</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
What is the result of above two two invocations?</p>
"	"<p>First one prints, ""ending"" after 4 seconds. Doesn't kill the parent as it is a graceful exit</p>
<div>
<p><br />
</p>
</div>
<div>
<p>Second one causes the child process to quit abnormally, which causes the parent process in this case, iex shell to quit as well.</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(14)&gt;  16:43:43.655 [erro
r] Process #PID&lt;0.147.0&gt; raised an exception ** (RuntimeError) ending
     (stdlib) erl_eval.erl:678: :erl_eval.do_apply/6  Interactive Eli
xir (1.9.1) - press Ctrl+C to exit (type h() ENTER for help) iex(1)&gt;</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
"	
"<p>What is Dialyzer and Typer?</p>
"	"<p>Dialyzer stands for “<em>DIscrepancy AnaLYZer for ERlang programs</em>,” and it does precisely that which is implied by its name: it finds discrepancies in Erlang code. Typer provides information about the types used in your programs.</p>
"	
"<p>What is the difference between import and require?</p>
"	"<p>import directive when used with module name automatically <strong>brings all functions and macros</strong> into the current namespace. Require on the otherhand <strong>only brings the macros</strong>. Import directive behind the scenes uses Require directive to import the macros.</p>
<div>
<p><br />
</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>defmodule Condi
tional do   defmacro custom_unless(clause, do: expression) do   quote
 do    if(!unquote(clause), do: unquote(expression)) end    end  end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex&gt; Conditional.custom_unless 2 &lt; 1, do: IO.puts &quot;It works!&quot;</code></pre>
<pre style=""line-height: 125%""><code>** (CompileError) iex: you must requi
re Conditional before invoking the macro Conditional.custom_unless/2</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>When used with import or require</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex&gt; require Conditional
Conditional  iex&gt; Conditional.custom_unless 2 &lt; 1, do: IO.puts &quot;It wo
rks!&quot;  It works!  :ok  iex&gt; import Conditional  Conditional iex&gt; Cond
itional.custom_unless 2 &lt; 1, do: IO.puts &quot;It works!&quot;  It works!  :ok</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
"	
"<p>How to implement naive flush buffer fun using receive?</p>
"	"<p><img src=""img735426423782847287.jpg"" /></p>
"	
"<p>Explain what is a child specification and its arguments.</p>
"	"<p>The child specification describes how the supervisor starts, shuts down, and restarts child processes. The child specification is a map containing up to 6 elements. The first two keys in the following list are required, and the remaining ones are optional:<br />
<br />
<code>:id</code> - any term used to identify the child specification internally by the supervisor; defaults to the given module. In the case of conflicting :id values, the supervisor will refuse to initialize and require explicit IDs. This key is required.<br />
<br />
<code>:start</code> - a tuple with the module-function-args to be invoked to start the child process. This key is required.<br />
<br />
<code>:restart</code> - an atom that defines when a terminated child process should be restarted (see the ""Restart values"" section below). This key is optional and defaults to :permanent.<br />
<br />
<code>:shutdown</code> - an integer or atom that defines how a child process should be terminated (see the ""Shutdown values"" section below). This key is optional and defaults to 5_000 if the type is :worker or :infinity if the type is :supervisor.<br />
<br />
<code>:type</code> - specifies that the child process is a :worker or a :supervisor. This key is optional and defaults to :worker.</p>
"	
"<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>Supervisor.child_spec/2(module_or_map, overrides)</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
is defined as below: It expects a module, <strong>{module, arg}</strong> or <strong>a map</strong> as the child specification. If a module is given, the specification is retrieved by calling <strong>module.child_spec(arg)</strong>.</p>
<div>
<p>After the child specification is retrieved, the fields on overrides are directly applied on the child spec. If overrides has keys that do not map to any child specification field, an error is raised.</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p>Think of a scenario where this call might be useful?</p>
</div>
"	"<p>Scenario where a supervisor needs to start multiple workers of the same GenServer. Here's snippet from a Supervisor code:</p>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>def start_link(_) do   File.mkdir_p!(@db_folder)   c
hildren= Enum.map(1..@pool_size, &amp;worker_spec/1)   Supervisor.start_l
ink(children, strategy: :one_for_one) end  defp worker_spec(worker_id
) do   default_worker_spec={Todo.DatabaseWorker, {@db_folder, worker_
id}}   Supervisor.child_spec(default_worker_spec, id: worker_id) end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<div>
<div>
<div>
<div>
<p>You start off by creating a list of three child specifications, each of them describing one database worker. Then you pass this list to Supervisor.start_link/2. The specification for each worker is created in worker_spec/1. You start off with the default specification for the database worker, {Todo.DatabaseWorker, {@db_folder, worker_id}}. Then you use <strong>Supervisor.child_spec/2 to set the unique ID for the worker</strong>. Without that, you’d end up with multiple children having the same ID. Recall that <strong>a default child_spec/1, generated via use GenServer</strong>, provides the name of the module in the :id field. Consequently, if you use that default specification and try to start two database workers, they’ll both get the same ID of Todo.DatabaseWorker. The Supervisor module will complain about it and raise an error. </p>
</div>
</div>
</div>
</div>
</div>
"	
"<p>What is the difference between Kernel.spawn_link and Process.monitor/1?</p>
"	"<div>
<div>
<div>
<div>
<p>There are two main differences between monitors and links. First, monitors are unidirectional — only the process that created a monitor receives notifications. In addition, unlike a link, the observer process won’t crash when the monitored process terminates. Instead, a message is sent, which you can handle or ignore. </p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(3)&gt; target_pid = spawn(fn -&gt; Process.sleep(20000) end) #PID&lt;0.16
0.0&gt; iex(4)&gt; Process.monitor(target_pid)                        #Refe
rence&lt;0.666283299.2325217283.165544&gt; iex(5)&gt; receive do
                           ...(5)&gt;  msg-&gt; IO.inspect(msg)
                 ...(5)&gt; end {:DOWN, #Reference&lt;0.666283299.232521728
3.165544&gt;, :process, #PID&lt;0.160.0&gt;, :normal} {:DOWN, #Reference&lt;0.666
283299.2325217283.165544&gt;, :process, #PID&lt;0.160.0&gt;, :normal} iex(6)&gt;</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
</div>
</div>
</div>
"	
"<p>Explain GenServer process lifecycle.</p>
"	"<p><img src=""16633584227328093070721391953307.jpg"" /></p>
"	
"<p>Explain <code>system_limit</code> error (Erlang).</p>
"	"<table>
<tbody>
<tr class=""odd"">
<td style=""text-align: left;"">A system limit has been reached, e.g. too many processes were created.</td>
</tr>
</tbody>
</table>
"	
"<p>Create and modify a map in Erlang?</p>
"	"<pre><code>X = #{a =&gt; 1, b =&gt; 2, c =&gt; 3}.
Y = X#{a := 2, d =&gt; 4}.</code></pre>
<p><br />
Other functions are available in <code>map</code> module.</p>
"	
"<p>Let's assume the following long running query that need be run concurrently. </p>
<div>
<p><br />
</p>
</div>
<div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(1)&gt;run_que
ry = fn query_def -&gt; Process.sleep(2000) &quot;#{query_def} result&quot; end
iex(2)&gt; Enum.map(1..5, &amp;run_query.(&amp;1))
        [&quot;1 result&quot;, &quot;2 result&quot;, &quot;3 result&quot;, &quot;4 result&quot;, &quot;5 result&quot;]</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>How do you Task module to run it concurrently?<br />
</p>
</div>
</div>
"	"<div>
<div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(
1)&gt; tasks=Enum.map(1..5, &amp;Task.async(fn -&gt; run_query.(&quot;query #{&amp;1}&quot;)
end)) iex(2)&gt; Enum.map(tasks, &amp;Task.await(&amp;1)) [&quot;query 1 result&quot;, &quot;qu
ery 2 result&quot;, &quot;query 3 result&quot;, &quot;query 4 result&quot;, &quot;query 5 result&quot;]</code></pre>
</div></td>
</tr>
</tbody>
</table>
<div>
<div>
<div>
<div>
<p>Here you create five queries, and then start each query execution in a separate task. The result in the tasks variable is a list of five %Task{} structs, each describing one task executing a query.</p>
</div>
<div>
<p>To wait for all the results, you pass each task from the tasks variable to the Task .await/1 function </p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
"	
"<p>In Phoenix, what's a pipeline?</p>
"	"<p>A pipeline is just a group of plugs that are used for a particular purpose. In a router, for example, you can have two different pipelines: one for a typical browser request, and one for a typical API request.<br />
<br />
In the browser pipeline, you accept ""html"" requests, getting the session and the flash (which stores temporary messages for the user, such as success, info, or warning messages); you set up forgery protection for your forms; and you put secure browser headers into the data. In the api pipeline, you only accept ""json"" requests. This makes sense—why get the flash and set up form forgery protection when a typical API request doesn’t utilize either of those features?</p>
"	
"<p>What is escript?</p>
"	"<p>Program (shell command) which allows to run Erlang programs as scripts. Example:<br />
<br />
<code>escript hello_world.erl</code></p>
"	
"<p>When a process will implicitly yield execution to the scheduler before its execution time is up?</p>
"	"<p><code>Process.sleep/1</code>, <code>receive</code> or when calling I/O operations, which are internally executed on separate threads called async threads. When issuing an I/O call, the calling process is preempted, and other processes get the execution slot. After the I/O operation finishes, the scheduler resumes the calling process.</p>
"	
"<p>What is the purpose of the pin operator (<code>^</code>)?</p>
"	"<p>Variables in Elixir can be rebound. By using <code>^</code> operator, user can prevent the pattern matching from assigning value and force the matching operation. For example:<br />
</p>
<pre><code>n = 1
n = 2    # Ok
^n = 3   # MatchError</code></pre>
"	
"<p>Implement naive timer with option to cancel using receive</p>
"	"<p><img src=""16641169239476528393728770931505.jpg"" /></p>
"	
"<p>List four basic GenServer features.</p>
"	"<ul>
<li>Support for calls and casts</li>
<li>Customizable timeouts for call requests</li>
<li>Propagation of server-process crashes to client processes waiting for a response</li>
<li>Support for distributed systems</li>
</ul>
"	
"<p>What is the string concatenation operator in Elixir?</p>
"	"<p><code>&lt;&gt;</code> because strings are just binaries.</p>
"	
"<p>What is <code>|&gt;</code>?</p>
"	"<p>The |&gt;, or pipe operator, takes the value on the left and passes it as the first argument to the function on the right. We call these compositions pipes or pipelines, and we call each individual function a segment or pipe segment.</p>
"	
"<p>To convert a normal GenServer implementation into a Supervised server, you needed to introduce start_link function that takes exactly one argument. Why is that?</p>
"	"<p>When you 'use GenServer' it automatically injects a child_spec/1 function that returns a default child specification. For example,</p>
<div>
<div>
<div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>%{id: Todo.Cache, start: {Todo.Cache, :start_link, [nil]}}</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>This is why when you define start_link in your GenServer you need to take one argument and ignore it. </p>
</div>
</div>
</div>
</div>
"	
"<p>How to register process when starting it via GenServer?</p>
"	"<p>Use <code>:name</code> option, e.g.: <code>GenServer.start(__MODULE__, nil, name: __MODULE__)</code>.</p>
"	
"<p>What processes are created by Ranch and Cowboy and which modules are called by them.</p>
"	"<p><img src=""img9105293199292996530.jpg"" /></p>
"	
"<p>Give example of list comprehension in Erlang.</p>
"	"<p><code>[2*N*M, N &lt;- [1, 2, 3, 4, 5, 6], M &lt;- [8, 9, 10], N &lt;= 3]</code></p>
"	
"<p>Explain a problem in the following code &amp; propose a solution:<br />
</p>
<pre><code>defmodule Todo.Server do
  use GenServer

  def init(name) do
    {:ok, {name, Todo.Database.get(name) || Todo.List.new()}}
  end

  ...
end</code></pre>
"	"<p>The problem is possibly long-running init/1 callbacks. Recall that GenServer.start returns only after the process has been initialized. Consequently, a long-running init/1 function will cause the creator process to block. In this case, a long initialization of a to-do server will block the client process. </p>
<div>
<p><br />
</p>
</div>
<div>
<div>
<div>
<div>
<p>To circumvent this problem, there’s a simple trick. You can use init/1 to send yourself an internal message and then initialize the process state in the corresponding handle_info callback:</p>
</div>
</div>
</div>
<div>
<div>
<div>
<p>reading the data</p>
</div>
</div>
</div>
<div>
<div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>def init(name) do
 send(self(), {:real_init, name})
 {:ok, nil}
end
...
def handle_info({:real_init, name}, state) do
 {:noreply, {name, Todo.Database.get(name) || Todo.List.new()}}
end</code></pre>
</div>
<br />
</td>
</tr>
</tbody>
</table>
<p>In the above, example when the client calls GenServer.start(Todo.Server, ""Bobs_list""), he will get the pid immediately although the state is not initialized. So the client is not blocked for the initialization. Note: Client is still blocked if he calls GenServer.call before the :real_init message is processed by the handle_info/2 call</p>
</div>
</div>
</div>
</div>
"	
"<p>What is the default timeout for <code>GenServer</code> call?</p>
"	"<p>5 seconds.</p>
"	
"<p>What is the difference between <em>and</em> and &amp;&amp; operators ?</p>
"	"<div>
<p>Elixir provides short-circuiting logical boolean operators <em>and, or, &amp;&amp;, and ||.</em> The <em>and</em> and <em>or</em> operators are said to be <strong>strict</strong> because they only accept booleans and return a boolean result. The pipes || and ampersands &amp;&amp; are non-strict/relaxed and can take any value. The values false and nil are the only falsey values and everything else is true.</p>
<p><br />
</p>
<p>Use <strong>and</strong> or <strong>or</strong> when you have boolean inputs and want a boolean result.</p>
<p><br />
<br />
<br />
</p>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(2)&gt; &quot;hello&quot; and false ** (BadBooleanError) expected a boolean
 on left-side of &quot;and&quot;, got: &quot;hello&quot;  iex(2)&gt; &quot;hello&quot; &amp;&amp; false false</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
"	
"<p>Imagine a usecase where you want to create a cluster of distributed processes and replicate data in those processes for fault tolerance. When you want to update data, you write to all processes for example, GenServer.multi_call/4. But for reading you can pick a random process form the cluster. What OTP mechanism would you choose?  </p>
"	"<p>1. Create a process group using :pg2 </p>
<div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(node2@localhost)1&gt; :pg2.start {:ok, #PID
&lt;0.112.0&gt;} iex(node2@localhost)2&gt; :pg2.create({:todo_list, &quot;bob&quot;}) :o
k iex(node2@localhost)3&gt; :pg2.join({:todo_list, &quot;bob&quot;}, self())  :ok</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
<div>
<p>2. Add each process in this process group</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(node1@localhost)1&gt; Node.connect(:&quot;node2@localhost&quot;) true iex
(node1@localhost)2&gt; :pg2.which_groups                [todo_list: &quot;bob
&quot;] iex(node1@localhost)3&gt; :pg2.join({:todo_list, &quot;bob&quot;}, self()) :ok</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
<div>
<p>3. Query all processes and send data updates to all processes</p>
</div>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(node2@localhost)4&gt; :pg2.
get_members({:todo_list, &quot;bob&quot;})  [#PID&lt;11151.110.0&gt;, #PID&lt;0.110.0&gt;]</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
<div>
<p>4. Pick the local process or a random process for data reads<br />
</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(node2@
localhost)5&gt; :pg2.get_closest_pid({:todo_list, &quot;bob&quot;}) #PID&lt;0.110.0&gt;</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
"	
"<p>How do you link two processes such that when one process dies, the other process dies too?</p>
"	"<div>
<p>`spawn_link(anon_fun) :: pid`</p>
</div>
<div>
<p>`spawn_link(module_name, :function_name, args) :: pid`</p>
</div>
<div>
<div>
<p>spawn_link call spawns a process and links it to the caller in one operation. When processes are linked, each can receive information when the other exits i.e when one exits abnormally, it kills the other.</p>
</div>
</div>
"	
"<p>Although GenServer and Agent seem to be doing the same thing which is managing state in a long running process, what is one shortcoming with Agent and how do you tackle that?</p>
"	"<div>
<div>
<div>
<div>
<p>One problem with agents is that they completely open the process’s state. Recall that with GenServer, the <strong>state is private to the server</strong> and can only be manipulated via well-defined messages. For example,</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>GenServer.cast(counter_server_pid, :increment)</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>the actualy increment logic is hidden from the client. With an Agent, though, the state can be manipulated in an arbitrary way through lambdas passed to Agent functions, which means the state is prone to accidental corruption </p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>Agent.update(counter_server_pid, fn x-&gt;x+5 end)</code></pre>
</div></td>
</tr>
</tbody>
</table>
<div>
<div>
<div>
<div>
<div>
<p>To guard against this problem, you’re advised to always wrap an agent in a dedicated module, and to only manipulate the agent process through functions of that module. For example,</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>def inc
rement(pid) do   Agent.update(counter_server_pid, fn x-&gt;x+5 end) end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
"	
"<p>True or False: All the nodes within a single machine don't share same cookie.</p>
"	"<p>False. The first time you start a BEAM instance, a random cookie is generated for you and persisted in your home folder in the .erlang.cookie file. By default, all nodes you start on that machine will have this cookie.</p>
<div>
<p><br />
</p>
</div>
<div>
<p>A node running on another machine will have a different cookie, so connecting two nodes on different machines won’t work by default; you need to somehow make all nodes use the same cookie. </p>
</div>
"	
"<p>What is a callback module?</p>
"	"<p>It's a module that is passed by name to some generic code (behaviour) that executes some callbacks on the module.</p>
"	
"<p>What is the difference between OTP app and Mix project?</p>
"	"<div>
<div>
<div>
<div>
<div>
<p>An OTP application is a <strong>runtime</strong> <strong>construct</strong>: a resource file that’s dynamically interpreted by the corresponding OTP-specific code. When using mix, you describe some aspects of this file, and other aspects are derived from your code. But the application itself has meaning only at runtime.</p>
</div>
<div>
<p>In contrast, a mix project is a <strong>compile-time construct</strong>. In the mix.exs file, you describe your application and implement modules. The compilation process then produces an application resource file. </p>
</div>
</div>
</div>
</div>
</div>
"	
"<p>What does <code>Process.flag(:trap_exit, true) | process_flag(trap_exit, true)</code> does?</p>
"	"<p>When trap_exit is set to true, exit signals arriving to a process are converted to {'EXIT', From, Reason} messages, which can be received as ordinary messages. If trap_exit is set to false, the process exits if it receives an exit signal other than normal and the exit signal is propagated to its linked processes. Application processes are normally not to trap exits.</p>
"	
"<p>What is the output of the following and why?</p>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex&gt;Atom == Elixir.Atom</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
"	"<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>true</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
"	
"<p>List <code>cowboy</code> behaviors (6).</p>
"	"<ul>
<li><code>cowboy_handler</code> - Plain HTTP handlers</li>
<li><code>cowboy_loop</code> - Loop handling</li>
<li><code>cowboy_middleware</code> - Middlewares</li>
<li><code>cowboy_rest</code> - REST handlers</li>
<li><code>cowboy_stream</code> - Stream handlers</li>
<li><code>cowboy_websocket</code> - Websocket handlers</li>
</ul>
"	
"<p>How to check number of processes in the system?</p>
"	"<p><code>:erlang.system_info(:process_count)</code></p>
"	
"<p>Explain how <code>receive</code> works under the hood.</p>
"	"<ol type=""1"">
<li>We we enter a receive statement, we start a timer (but only if an after section is present in the expression).</li>
<li>Take the first message in the mailbox and try to match it against Pattern1, Pattern2, and so on. If the match succeeds, the message is removed from the mailbox, and the expressions following the pattern are evaluated.</li>
<li>If none of the patterns in the receive statement matches the first message and in the mailbox, then the first message is removed from the mailbox and put into a ""save queue"". The second message in the mailbox is then tried. This procedure is repeated until a matching message is found or until all the messages in the mailbox have been examined. If none of the messages in the mailbox matches, then the process is suspended and will be rescheduled for execution the next time a new message is put in the mailbox.</li>
<li>When a new message arrives, the messages in the save queue are not rematched; only the new message is matched.</li>
<li>As soon as a message has been matched, then all messages that have been put into a save queue are reentered into the mailbox in the order in which they arrived at the process. If a timer was set, it is cleared.</li>
<li>If the timer elapses when we are waiting for a message, then evalaute the expressions ExpressionsTimeout and put any saved messages back into the mailbox in the order in which they arrived at the process.</li>
</ol>
"	
"<p>How do you parse commandline arguments in Elixir?</p>
"	"<p><code>OptionsParser.parse(argv, options\\[])</code> parses argv into a keyword list.</p>
<p>The following options are supported:<br />
- :switches or :strict - see the “Switch definitions” section below<br />
- :allow_nonexistent_atoms - see the “Parsing dynamic switches” section below<br />
- :aliases - see the “Aliases” section below</p>
<p>It returns a three-element tuple with the form <code>{parsed, args, invalid}</code>, where:<br />
1. <em>parsed</em> is a keyword list of parsed switches with <code>{switch_name, value}</code> tuples in it; switch_name is the atom representing the switch name while value is the value for that switch parsed according to opts<br />
2. <em>args</em> is a list of the remaining arguments in argv as strings<br />
3. <em>invalid</em> is a list of invalid options as {option_name, value} where option_name is the raw option and value is nil if the option wasn’t expected or the string value if the value didn’t have the expected type for the corresponding option</p>
<p>Let's say you need to parse the command line:<br />
<code>&gt;myprogram --user mike@github.com --project elixir-lang --issues 10</code></p>
<div class=""codehilite"" style=""background: #f8f8f8"" data-align=""left"">
<pre style=""line-height: 125%""><code>iex&gt; argv = [&quot;-u&quot;,&quot;mike@github.com&quot;,&quot;--project&quot;, &quot;elixir-lang&quot;, &quot;--issues&quot;, &quot;9&quot;] [&quot;-u&quot;, &quot;mike@github.com&quot;, &quot;--project&quot;, &quot;elixir-lang&quot;, &quot;--issues&quot;, &quot;9&quot;] iex(60)&gt; OptionParser.parse(argv, switches: [ user: :string, project: :string, issues: :integer], aliases: [ u: :user, p: :project, i: :issues ]) {[user: &quot;mike@github.com&quot;, project: &quot;elixir-lang&quot;, issues: 9], [], []} </code></pre>
</div>
"	
"<p>What is the Shell command to list Erlang nodes and their listening ports?</p>
"	"<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>% epmd -names epmd: up and running on po
rt 4369 with data: name node3 at port 61317 name node2 at port 61315</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>Remember that epmd is a OS process that gets started when a first BEAM instance started on a computer</p>
"	
"<p>How to compile Erlang code?</p>
"	"<p><code>erlc flags file.erl</code> from command line, <code>compile:file(FileName)</code> from erl or in a module or <code>c(...)</code> from erl.</p>
"	
"<p>List and explain all (9) Ecto's mix tasks.</p>
"	"<ul>
<li><code>mix ecto.create</code> - Creates the repository storage</li>
<li><code>mix ecto.drop</code> - Drops the repository storage</li>
<li><code>mix ecto.dump</code> - Dumps the repository database structure</li>
<li><code>mix ecto.gen.migration</code> - Generates a new migration for the repo</li>
<li><code>mix ecto.gen.repo</code> - Generates a new repository</li>
<li><code>mix ecto.load</code> - Loads previously dumped database structure</li>
<li><code>mix ecto.migrate</code> - Runs the repository migrations</li>
<li><code>mix ecto.migrations</code> - Displays the repository migration status</li>
<li><code>mix ecto.rollback</code> - Rolls back the repository migrations</li>
</ul>
"	
"<p>How to start/configure Phoenix in a regular OTP app?</p>
"	"<p>Phoenix is started by adding <code>Endpoint</code> callback module to app's supervisor. For example:<br />
<br />
</p>
<pre><code>children = [BlogWeb.Endpoint] 
opts = [strategy: :one_for_one, name: Blog.Supervisor] 
Supervisor.start_link(children, opts)</code></pre>
"	
"<p>How do you invoke a function on a remote node?</p>
"	"<div class=""codehilite"" style=""background: #f8f8f8"" data-align=""left"">
<pre style=""line-height: 125%""><code>iex(node1@katbookpro)4&gt; Node.connect(:node2@katbookpro) true iex(node1@katbookpro)7&gt; Node.spawn(:node2@katbookpro, fn-&gt;File.ls! |&gt; Enum.join(&quot;,&quot;)|&gt;IO.puts end) #PID&lt;10406.101.0&gt; pin.exs,Lists,fizzbuzz.exs,Enum,Maps_KW,Binaries </code></pre>
</div>
"	
"<p>How to stop process from GenServer callbacks?</p>
"	"<p>Return <code>{:stop, reason}</code> or <code>:ignore</code> from <code>init/1</code> or <code>{:stop, reason, new_state</code> from <code>handle_</code> callbacks.</p>
"	
"<p>List Erlang standard library behaviours.</p>
"	"<ul>
<li><code>gen_server</code> — Generic implementation of a stateful server process</li>
<li><code>supervisor</code> — Provides error handling and recovery in concurrent systems</li>
<li><code>application</code> — Generic implementation of components and libraries</li>
<li><code>gen_event</code> — Provides event-handling support</li>
<li><code>gen_statem</code> — Runs a finite state machine in a stateful server process</li>
</ul>
"	
"<p>What is the format of the error signal?</p>
"	"<p><code>{'EXIT', Pid, Why}</code></p>
"	
"<p>how do you send a message to a process named `:kv`?</p>
"	"<p>send :kv, {:hello, ""world""}</p>
"	
"<p>How do you detect idle periods and automatically shutdown GenServers?</p>
"	"<div>
<div>
<div>
<p>In values returned from GenServer callbacks, you can include <strong>one extra element at the end of the return tuple</strong>. This element, if it’s an integer, represents an idle time after which the timeout message is sent to the GenServer process. </p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<div>
<div>
<div>
<p>For example, in init/1, instead of returning {:ok, initial_state}, you can return {:ok, initial_state, 1000}. The value of 1000 states that if no call, cast, or plain message arrives to the server process in 1,000 milliseconds, the <strong>handle_info/2</strong> callback will be invoked, and the first argument will have the value of :timeout.</p>
</div>
<div>
<p>The same thing holds true for other callbacks, such as handle_cast/2 and handle_ call/3, where you can return {:noreply, new_state, timeout} and {:reply, response, new_state, timeout} respectively. </p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>def handle_info(:timeout, {name, todo_list}) do  IO.puts(&quot;Stopping
 to-do server for #{name}&quot;)  {:stop, :normal, {name, todo_list}} end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
</div>
</div>
</div>
</div>
</div>
"	
"<p>Explain Phoenix basic file structure.</p>
"	"<p><img src=""img4330346429945759580.jpg"" /><br />
<br />
Browser files like JavaScript and CSS go into assets and the Phoenix configu-ration goes into config. Your supervision trees (we’ll explore those more in chapters to come), long-running processes, and application business logic go into lib/hello. Your web-related code—including controllers, views, and templates—goes in lib/hello_web. Predictably, you’ll put tests in test.</p>
"	
"<p>Explain basic mechanism of Plug Cowboy adapter.</p>
"	"<p>Adapter generaters Cowboy configuration (by default all requests are piped to one default handler), starts the server and calls the plug to process the request and send the response. The first pipe is the router which then takes over. At the end, in most cases adapter just calls <code>:cowboy_req.reply</code>.</p>
"	
"<p>What is <code>erl</code> (<code>werl</code>)?</p>
"	"<p><code>erl</code> (<code>werl</code> for Windows) is an Erlang simulator and preffered way of starting Erlang for interactive use.</p>
"	
"<p>Why a crash of one Erlang process is completely isolated from other processes?</p>
"	"<p>Because they don't share memory.</p>
"	
"<p>What is the purpose and output of <code>mix ecto.gen.repo -r Friends.Repo</code>?</p>
"	"<p>This command will generate the configuration required to connect to a database. The first bit of configuration is in <code>config/config.exs</code>:</p>
<pre><code>config :friends, Friends.Repo,
  database: &quot;friends&quot;,
  username: &quot;user&quot;,
  password: &quot;pass&quot;,
  hostname: &quot;localhost&quot;</code></pre>
<p>This configures how Ecto will connect to our database, called ""friends"". Specifically, it configures a ""repo"". The <code>Friends.Repo</code> module is defined in <code>lib/friends/repo.ex</code> by our <code>mix ecto.gen.repo</code> command:</p>
<pre><code>defmodule Friends.Repo do
  use Ecto.Repo,
    otp_app: :friends,
    adapter: Ecto.Adapters.Postgres
end</code></pre>
<p><br />
<br />
<br />
</p>
"	
"<p>how do you register the name `:kv` with a process identified by `pid`?</p>
"	"<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>Process.register(pid, :kv)</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
<p>Please note that there's also :global.register/2 which registers the process globally</p>
"	
"<p>How to print built-in functions within erl session?</p>
"	"<p>Type <code>help().</code></p>
"	
"<p>How to check module info (Elixir)?</p>
"	"<p>SomeModule.__info__/1</p>
"	
"<p>What are the Task module equivalents for spawn/1 and spawn_link/1 respectively?</p>
"	"<p>Task.start/1 and Task.start_link/1</p>
"	
"<p>How do you raise an error when facing exceptional cases?</p>
"	"<p>Using the macro <code>raise/1</code> and if you want to specify the error type then <code>raise/2</code>:</p>
<pre><code>iex&gt; raise(&quot;some exception&quot;)
** (RuntimeError) hello

iex&gt; raise(ArgumentError, message: &quot;the argument value is invalid&quot;)
** (ArgumentError) the argument value is invalid</code></pre>
"	
"<p>What are the various methods to pass child specification to a Supervisor?</p>
"	"<p>1. Pass a List of modules for the child processes to be started. For example,</p>
<div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>Superv
isor.start_link([Todo.Cache, Todo.Database], strategy: :one_for_one)</code></pre>
</div></td>
</tr>
</tbody>
</table>
<div>
<p>Supervisor.start_link/2 starts a supervisor process and links it to the caller.</p>
</div>
<div>
<p>The first argument is the list of desired children. More precisely, each element of this list is a <strong>child specification</strong> that describes how the child should be started and managed. When the supervisor process is started, it will go through this list and start each child according to the specification. In this example, the supervisor will invoke Todo.Cache.child_spec([]). In this case, since Todo.Cache is a GenServer is has a defult implementation of child_spec/1 </p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p>2. Pass tuple {module_name, arg} in the child specification list. Supervisor will first invoke <strong>module_name.child_ spec(arg)</strong> to get the actual specification. This function must return the specification map. The supervisor then proceeds to start the child according to the specification. <br />
</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p>3. Pass a child specification map to Supervisor.start_link/2. For example,</p>
</div>
<div>
<div>
<div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>Supervisor.start_link( [ %{      id: Todo.Cache,      start: {
Todo.Cache, :start_link, [nil] }    }   ],   strategy: :one_for_one)</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
</div>
</div>
</div>
</div>
</div>
"	
"<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(1)&gt; :ets.new(:todo_list, [:bag, :named_table]) :
todo_list iex(2)&gt; :ets.insert(:todo_list, {~D[2018-05-24], &quot;Dentist&quot;}
) true iex(3)&gt; :ets.insert(:todo_list, {~D[2018-05-24], &quot;Shopping&quot;})
true iex(4)&gt; :ets.insert(:todo_list, {~D[2018-05-30], &quot;Haircut&quot;})  tr
ue iex(7)&gt; :ets.insert(:todo_list, {~D[2018-05-24], &quot;Haircut&quot;}) true</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>List all the dates with the same appointments in this case ""Haircut""</p>
"	"<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(8)&gt; :ets.match_object(:todo_list, {:_, &quot;H
aircut&quot;}) [{~D[2018-05-30], &quot;Haircut&quot;}, {~D[2018-05-24], &quot;Haircut&quot;}]</code></pre>
</div></td>
</tr>
</tbody>
</table>
<div>
<div>
<div>
<div>
<p>The function :ets.match_object/2 accepts a match pattern — a tuple that describes the shape of the row. The atom :_ indicates that you accept any value, so the pattern {:_, ""Dentist""} essentially matches all rows where the second element is ""Dentist"". </p>
</div>
</div>
</div>
</div>
<p><br />
</p>
"	
"<p>What would <code>'foo bar'</code> be evaluated to in Erlang?</p>
"	"<p>'&lt;name&gt;' denote atoms in Erlang, so <code>'foo bar'</code> would be an atom.</p>
"	
"<p>What are two popular libraries for implementing permissions/access policy?</p>
"	"<p>Canada and Bodyguard.</p>
"	
"<p>What are the 3 functions defined in the Mix.exs file?</p>
"	"<ul>
<li><code>project/0</code> - Defines the project including name, version, Elixir version, etc.</li>
<li><code>application/0</code> - Here you specify some options that will eventually make it to the application resource file. In this case, the description includes the list of other Erlang and Elixir applications you depend on, together with the module that will be used to start the application. By default, Elixir’s <code>:logger</code> application is listed.</li>
<li><code>deps/0</code><br />
Defines the list of third-party dependencies — other libraries you want to use in your project.</li>
</ul>
"	
"<p>GenServer synchronous(GenServer.call/3) calls don't block indefinitely, True or False?</p>
"	"<p>True. GenServer.call has a default timeout of five seconds. This can be overriden by passing a custom ms value as the 3rd arg</p>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>call(server, request, timeout)</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
"	
"<p>What is <code>[project name]Web</code> (e.g. <code>BlogWeb</code>) module?</p>
"	"<p>It contains four macros: <code>controller</code>, <code>view</code>, <code>router</code> and <code>channel</code>, which import code from Phoenix modules for convenience. They can be used later in user's callback modules, for example:<br />
<br />
</p>
<pre><code>defmodule BlogWeb.MyController do
  use BlogWeb, :controller
  
  ...</code></pre>
<p><br />
<br />
This will inject the following code:<br />
<br />
</p>
<pre><code>use Phoenix.Controller, namespace: BlogWeb 
import Plug.Conn 
import BlogWeb.Gettext alias BlogWeb.Router.Helpers, as: Routes</code></pre>
"	
"<p>What is the relationship between supervisors and process pegistry? Why?</p>
"	"<p>Using supervisor, requires rich process discovery, typically via process registry. If a process is started from a supervisor, you don’t have access to its PID.. This is a property of supervisors. You can’t keep a worker’s PID for a long time because that process might be restarted, and its successor will have a different PID. Therefore, you need a way to give symbolic names to supervised processes and access each process via this name. When a process is restarted, the successor will register itself under the same name, which will allow you to reach the right process even after multiple restarts. This is typically achieved via <code>Registry</code> module.</p>
"	
"<p>How does a supervisor starting works, when you invoke Supervisor.start_link(child_specs, options)?</p>
"	"<div>
<div>
<div>
<div>
<p>1. The new process is started, powered by the Supervisor module.</p>
</div>
<div>
<p>2. The supervisor process goes through the list of child specifications and starts each child, one by one.</p>
</div>
<div>
<p>3. Each specification is resolved, if needed, by invoking child_spec/1 from the cor- responding module.</p>
</div>
<div>
<p>4. The supervisor starts the child process, according to the :start field of the child specification. </p>
</div>
</div>
</div>
</div>
"	
"<p>What is a via tuple?</p>
"	"<div>
<div>
<div>
<p>A via tuple is a mechanism that allows you to use an arbitrary third-party registry to register OTP-compliant processes, such as GenServer and supervisor. Recall that you can provide a :name option when starting a GenServer: </p>
</div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>GenServer.start_link(callback_module, some_arg, name: some_name)</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
<div>
<p>Instead of passing only atoms as the :name option, which caused the started process to be registered locally, the :name option can also be provided in the shape of <strong>{:via, some_module, some_arg}</strong>. Such a tuple is also called a via tuple. <br />
</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<div>
<div>
<div>
<div>
<p>If you provide a <strong>via tuple as the name</strong> option, GenServer will invoke a well-defined function from some_module to register the process. Likewise, you can pass a <strong>via tuple as the first argument</strong> to GenServer.cast and GenServer.call, and GenServer will discover the pid using some_module. In this sense, some_module acts like a custom third-party process registry, and the via tuple is the way of connecting such a registry with GenServer and similar OTP abstractions. </p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
"	
"<p>What are the two signatures of the <code>spawn</code> function?</p>
"	"<ul>
<li><p><code>spawn/1</code> takes an anonymous function that takes 0 arguments:<br />
</p>
<pre><code>iex&gt; spawn(fn -&gt; IO.puts(&quot;greet&quot;) end)
greet
#PID&lt;0.90.0&gt;</code></pre></li>
<li><p><code>spawn/3</code> takes a module name, named function and an argument list:<br />
</p>
<pre><code>defmodule SpawnBasic do
  def greet(msg) do
    IO.puts msg
  end
end
spawn(SpawnBasic, :greet, [&quot;hello&quot;])</code></pre></li>
</ul>
"	
"<p>How to implement naive priority receive using receive?</p>
"	"<p><img src=""img5919129619292137912.jpg"" /></p>
"	
"<p>Why <code>1 &lt; true</code> true evaluates to true in Elixir?</p>
"	"<p>Because types in Elixir are orderable according to the following rule:  <span style=""background-color: rgb(238, 255, 204); color: rgb(85, 85, 85); font-family: Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; font-size: 1.1em;"">number &lt; atom &lt; reference &lt; fun &lt; port &lt; pid &lt; tuple &lt; list &lt; bit string.</span></p>
"	
"<p>What enables Elrang/Elixir to be so easily distributed?</p>
"	"<p>Elrang/Elixir can be distributed because EP communicate the same way regardless of whether they originate from the same BEAM instance or not.</p>
"	
"<p>Explain the purpose and usage of <code>Config</code> module.</p>
"	"<p><code>Config</code> provides a simple keyword-based configuration API. This module is most commonly used to define application configuration, typically in <code>config/config.exs</code>:<br />
</p>
<pre><code>import Config

config :some_app,
  key1: &quot;value1&quot;,
  key2: &quot;value2&quot;

import_config &quot;#{config_env()}.exs&quot;</code></pre>
<p><code>import Config</code> will import the functions <code>config/2</code>, <code>config/3</code>, <code>config_env/0</code>, <code>config_target/0</code>, and <code>import_config/1</code> to help you manage your configuration.<br />
<br />
<code>config/2</code> and <code>config/3</code> are used to define key-value configuration for a given application. Once Mix starts, it will automatically evaluate the configuration file and persist the configuration above into <code>:some_app</code>'s application environment, which can be accessed in as follows:<br />
</p>
<pre><code>&quot;value1&quot; = Application.fetch_env!(:some_app, :key1)</code></pre>
<p>Finally, the line <code>import_config ""#{config_env()}.exs""</code> will import other config files based on the current configuration environment, such as <code>config/dev.exs</code> and <code>config/test.exs</code>.</p>
"	
"<p>List &amp; briefly explain all (8) <code>GenServer</code> module callbacks.</p>
"	"<ul>
<li><code>init(init_arg)</code> - Invoked when the server is started. <code>start_link/3</code> or <code>start/3</code> will block until it returns.</li>
<li><code>handle_call(request, from, state)</code> - Invoked to handle synchronous <code>call/3</code> messages. <code>call/3</code> will block until a reply is received (unless the call times out or nodes are disconnected).</li>
<li><code>handle_cast(request, state)</code> - Invoked to handle asynchronous <code>cast/2</code> messages.</li>
<li><code>handle_continue(continue_arg, state)</code> - Invoked to handle continue instructions.</li>
<li><code>handle_info(msg, state)</code> - Invoked to handle all other messages.</li>
<li><code>terminate(reason, state)</code> - Invoked when the server is about to exit. It should do any cleanup required.</li>
<li><code>code_change(old_vsn, state, extra)</code> - Invoked to change the state of the <code>GenServer</code> when a different version of a module is loaded (hot code swapping) and the state's term structure should be changed.</li>
<li><code>format_status(reason, pdict_and_state)</code> - Invoked in some cases to retrieve a formatted version of the <code>GenServer</code> status.</li>
</ul>
"	
"<p>Explain <code>badarith</code> - <code>ArithmericError</code> error.</p>
"	"<table>
<tbody>
<tr class=""odd"">
<td style=""text-align: left;"">Bad argument in an arithmetic expression.</td>
</tr>
</tbody>
</table>
"	
"<p>What is the usage of <code>!</code> and <code>?</code> mean function names?</p>
"	"<ul>
<li><p><code>!</code> is a convention for functions which raise exceptions on failure. For example:</p>
<pre><code>iex&gt; Enum.fetch([2,4,5,6], 5)
:error
iex&gt; Enum.fetch!([2,4,5,6], 5)
** (Enum.OutOfBoundsError) out of bounds error
    (elixir) lib/enum.ex:842: Enum.fetch!/2</code></pre>
<p><br />
</p></li>
<li><p><code>?</code> is a convention for functions which return a boolean value:<br />
</p>
<pre><code>Enum.all?([1,2,3,4], fn x -&gt; x&gt;0 end)</code></pre></li>
</ul>
"	
"<p>List <code>cowboy</code> function* modules.<br />
<br />
<em>*/ninenines.eu/docs/en/cowboy/2.9/manual/</em></p>
"	"<ul>
<li><code>cowboy</code> - Listener management</li>
<li><code>cowboy_req</code> - Request and response (contains reply functions)</li>
<li><code>cowboy_router</code> - Router (router compilation)</li>
<li><code>cowboy_constraints</code> - Constraints</li>
</ul>
"	
"<p>How to eval Erlang expression from OS shell?</p>
"	"<p><code>erl -eval 'expr' -noshell -s init stop</code></p>
"	
"<p>Why when spawning processes you should be careful what is in current closure?</p>
"	"<p>Because data* will be deep-copied to new process which can be slow and consumes memory.<br />
<br />
*Except for binaries.</p>
"	
"<p>What is Erlang's <code>rpc/erpc</code> module?</p>
"	"<p>Those modules contain services similar to Remote Procedure Calls. It also contains broadcast facilities and parallel evaluators. A remote procedure call is a method to call a function on a remote node and collect the answer. It is used for collecting information on a remote node, or for running a function with some specific side effects on the remote node.</p>
"	
"<p>How do you get the current node's name? How to assign a name when starting BEAM?</p>
"	"<pre><code>iex&gt; Node.self()
:nonode@nohost</code></pre>
<p>To start BEAM with a name, one can use <code>name</code> or <code>sname</code> option:<br />
</p>
<pre><code>&gt;iex --name mike@katbookpro
Erlang/OTP 20 [erts-9.3] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

Interactive Elixir (1.6.4) - press Ctrl+C to exit (type h() ENTER for help)
iex(mike@katbookpro)1&gt;</code></pre>
"	
"<p>Explain <code>{badfun,F}</code> - <code>BadFunctionError</code> error.</p>
"	"<table>
<tbody>
<tr class=""odd"">
<td style=""text-align: left;"">Something is wrong with a function <code>F</code>.</td>
</tr>
</tbody>
</table>
"	
"<p>how do you clear all messages from the current processes mailbox?</p>
"	"<p>flush()</p>
"	
"<p>How much memory single process occupies?</p>
"	"<p>Few kilobytes (typically around 2), compared to OS thread which takes few megabytes.</p>
"	
"<p>What are the different restart strategies for a Supervisor and where do you specify it?</p>
"	"<p>In Supervisor.start_link(child_spec, options) as part of options. For example,</p>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>Supervisor.start_link( [Todo.
ProcessRegistry, Todo.Cache, Todo.Database], strategy: :one_for_one)</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>* <strong>:one_for_one</strong> restart strategy. In this mode, a supervisor handles a process termination by starting a new process in its place, leaving other children alone.</p>
</div>
<div>
<p>* <strong>:one_for_all</strong>—When a child crashes, the supervisor terminates all other children and then starts all children. </p>
</div>
<div>
<div>
<div>
<div>
<div>
<p>* <strong>:rest_for_one</strong>—When a child crashes, the supervisor terminates all younger siblings of the crashed child. Then the supervisor starts new child processes in place of the terminated ones. </p>
</div>
</div>
</div>
</div>
</div>
"	
"<p>What is a behaviour?</p>
"	"<p>In Erlang terminology, a behaviour is generic code that implements a common pattern. The generic logic is exposed through the behaviour module, and you can plug into it by implementing a corresponding callback module. The callback module must satisfy a contract defined by the behaviour, meaning it must implement and export a set of functions. The behaviour module then calls into these functions, allowing you to provide your own specialization of the generic code.</p>
"	
"<p>What does it mean that <code>Process.register(pid, :name)</code> creates a local name?</p>
"	"<p>It means that the registered name only applies to single BEAM instance.</p>
"	
"<p>We know that Kernel.spawn_link links two processes and if one dies the other will be terminated as well. What is the function call to prevent the second process form killed?</p>
"	"<div>
<div>
<div>
<p>This can be done by trapping exits. When a process is trapping exits, it isn’t taken down when a linked process crashes. Instead, an exit signal is placed in the surviving process’s message queue, in the form of a standard message. A trapping process can receive these messages and do something about the crash.</p>
</div>
<div>
<p>To set up an exit trap, you call Process.flag(:trap_exit, true), which makes the current process trap exit signals.</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<div>
<div>
<div>
<div>
<div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(1)&gt; spawn
(fn -&gt; Process.flag(:trap_exit, true)
 spawn_link(fn -&gt; raise(&quot;Something went wrong&quot;) end)
                receive do                                    msg -&gt;
IO.inspect(msg)                                 end             end)</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
</div>
</div>
<div>
<div>

</div>
<div>
<div>
<div>
<div>
<div>
<p>Here you make the parent process trap exits and then spawn a linked process that will crash. Then you receive a message and print it to the screen. The shell session produces the following output:</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>{
:EXIT, #PID&lt;0.93.0&gt;,  {%RuntimeError{message: &quot;Something went wrong&quot;}
,   [{:erl_eval, :do_apply, 6, [file: &#39;erl_eval.erl&#39;, line: 668]}]}}</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
"	
"<p>How do you print documentation a function in <code>iex</code>?</p>
"	"<p>Using the <code>h/1</code>, e.g.:</p>
<pre><code>h IO.inspect</code></pre>
"	
"<p>Explain Elixir's <code>raise</code> macro.</p>
"	"<p>Creates <code>%RuntimeError{}</code> struct thrown as an error.</p>
"	
"<p>What is an Erlang module?</p>
"	"<p>Modules are containers for code. They guard access to functions by either making them private or exporting them for public use. There can be only one module per object file (.beam file). If a module is named test, it must reside in a source file called test.erl and be compiled to an object file called test.beam. A module consists of a sequence of attributes and function declarations, each terminated by period (.).</p>
"	
"<p>Is Erlang strict or not? Is it dynamic or static?</p>
"	"<p>Erlang is strict and dynamic because it has strict typing but dynamic because it doesn't require types to be declared.</p>
"	
"<p>What is the difference between Process.register/2, Elixir.Registry.register/2 and :global.register/2?</p>
"	"<p>Both Process.register/2 and Registry.register/2 are or local registration within a single node. :global.register/2 is a registration mechanism for distributed system consisting of multiple nodes. In Process.register/2 you can only use an atom is as a registration name but Elixir Registry allows an arbitrary term</p>
<div>
<p><br />
</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex&gt; Process
.register(:thing, pid)  iex&gt; Process.whereis(:thing)  #PID&lt;0.134.00&gt;</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex&gt;
Registry.start_link(:unique, :registry)  {:ok, #PID&lt;0.139.0&gt;}  iex&gt; R
egistry.register(:registry, :thing, self()) {:ok, #PID&lt;0.147.0&gt;} iex&gt;
 Registry.lookup(:registry, :thing) [{#PID&lt;0.110.0&gt;, #PID&lt;0.110.0&gt;}]</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<div>
<div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(node1@localhost)10&gt; :
global.register_name({:todo_list, &quot;bob&quot;}, self())  :yes  iex(node2@lo
calhost)8&gt; :global.whereis_name({:todo_list, &quot;bob&quot;}) #PID&lt;7954.90.0&gt;</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
<div>
<div>
<div>
<div>

</div>
</div>
</div>
</div>
</div>
</div>
</div>
"	
"<p>What is an application resource file?</p>
"	"<div>
<div>
<div>
<p>It's a plain-text file written in Erlang terms that describes the application. Applications are specified in their <em>resource file</em>, which is a file called APP.app, where APP is the application name. For example, the application resource file of the OTP application ex_unit is called ex_unit.app.</p>
</div>
<div>
<p>You'll find the resource file of an application in its <strong>ebin</strong> directory, it is generated automatically by Mix. Some of its keys are taken from the keyword lists returned by the project/0 and application/0 functions defined in mix.exs, and others are generated by Mix itself.<br />
</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p>In summary, mix.exs is <strong>compile time description of a project and a resource file a run time description of an OTP application</strong></p>
</div>
</div>
</div>
"	
"<p>The first time you call the function of a module, BEAM tries to find the corresponding file on the disk. The VM looks for the file in the current folder and then in the code paths. What is the function to list all the code paths under which BEAM checks for modules if it can't find it in current directory?</p>
"	"<pre><code>:code.get_path()</code></pre>
"	
"<p>How do you list all the public/exported functions of a module in Elixir?</p>
"	"<p>You can use the <code>__info__/1</code> function that’s automatically injected into each Elixir module during compilation. It lists all exported functions of a module (except <code>__info__/1</code>).</p>
<pre><code>iex&gt; Enum.__info__(:functions)
[
  all?: 1,
  all?: 2,
  any?: 1,
  ...
]</code></pre>
"	
"<p>Why can't variables start with lowercase in Erlang?</p>
"	"<p>Because atoms start with lowercase.</p>
"	
"<p>Implement <code>GenServer</code> stack data structure.</p>
"	"<pre><code>defmodule Stack do
  use GenServer
  
  @impl true
  def init(stack) do
    {:ok, stack}
  end

  @impl true
  def handle_call(:pop, _from, [head | tail]) do
    {:reply, head, tail}
  end

  @impl true
  def handle_cast({:push, element}, state) do
    {:noreply, [element | state]}
  end
end

# Start the server
{:ok, pid} = GenServer.start_link(Stack, [:hello])

# This is the client
GenServer.call(pid, :pop)
#=&gt; :hello

GenServer.cast(pid, {:push, :world})
#=&gt; :ok

GenServer.call(pid, :pop)
#=&gt; :world</code></pre>
"	
"<p>Supervisor.start_link/2 starts a Supervisor process with the given children. What are the two arguments passed to the start_link function?</p>
"	"<p>Children and a list of options.</p>
<div>
<p><br />
</p>
</div>
<div>
<p>The children argument is either </p>
</div>
<div>
<p> * two-element tuples with {module_name, arg}. In this case, Supervisor will first invoke module_name.child_ spec(arg) to get the actual specification. This function must return the specification map. The supervisor then proceeds to start the child according to the specification. </p>
</div>
<div>
<p> * or a map with the child specification. here’s what the specification for the to-do cache looked like:<br />
</p>
</div>
<div>
<div>
<div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>%{</code></pre>
<pre style=""line-height: 125%""><code>
    id: Todo.Cache,       start: {Todo.Cache, :start_link, [nil]}, }</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
<div>
<p>A strategy is required to be provided through the :strategy option. <br />
</p>
</div>
</div>
</div>
</div>
"	
"<p>How to start Observer GUI?</p>
"	"<pre><code>:observer.start()</code></pre>
"	
"<p>Explain <code>noconnection</code> error (Erlang).</p>
"	"<table>
<tbody>
<tr class=""odd"">
<td style=""text-align: left;"">A link or monitor to a remote process was broken because a connection between the nodes could not be established or was severed.</td>
</tr>
</tbody>
</table>
"	
"<p>What is returned by the following?: </p>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>Task.start fn -&gt; 1 + 1 end</code></pre>
</div></td>
</tr>
</tbody>
</table>
"	"<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>{:ok, #PID&lt;...&gt;}</code></pre>
</div></td>
</tr>
</tbody>
</table>
"	
"<p>Give an example of pattern matching on lists.</p>
"	"<pre><code>[H|T] = L
[T] = L
[] = L</code></pre>
"	
"<p>List Elixir's primitive types and three basic data-structures.</p>
"	"<p>Elixir has integers and floats (64-bit double precision), booleans, atoms and strings. Three basic data-structures are (linked) lists, tuples and maps.</p>
"	
"<p>Which values are falsy in Elixir? Which are truthy?</p>
"	"<p><code>false</code> and <code>nil</code> are falsy. Everything else is truthy.</p>
"	
"<div>
<p>When a supervisor is terminated, where do you specify the strategy to handle children processes?<br />
</p>
</div>
"	"<p>In Supervisor.start_link(child_spec, options) as part of the options. For example,</p>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>Supervisor.start_link( [Todo.ProcessRegistry, T
odo.Cache, Todo.Database], strategy: :one_for_one, shutdown: 10_000)</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>When a supervisor process terminates, it will instruct its children to terminate gracefully, thus giving them the chance to do final cleanup. If some of those children are themselves supervisors, they will take down their own trees in the same way. Graceful termination of a GenServer worker involves invoking the terminate/2 callback, but only if the worker process is trapping exits. Because graceful termination involves the possible execution of cleanup code, it may take longer than desired. The :shutdown option in a child specification lets you control how long the supervisor will wait for the child to terminate gracefully. Possible values for :shutdown are,</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p>*  <strong>time</strong> in milliseconds </p>
</div>
<div>
<p>* <strong>:infinity</strong> - instructs the supervisor to wait indefinitely for the child to terminate </p>
</div>
<div>
<p>* <strong>:brutal_kill</strong> -tells the supervisor to immedi- ately terminate the child in a forceful way </p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<div>
<p>The default value of the :shutdown option is 5000ms for a worker process or :infinity</p>
</div>
<div>
<p>for a supervisor process.</p>
</div>
</div>
"	
"<p>What is the difference between a Behavior and a Protocol?</p>
"	"<p>Protocol is a type/data based polymorphism.When I call Enum.each(foo, ...), the concrete enumeration is determined from the type of foo. For example, you can define Inspect(term, opts) for your custom datastructure using defprotocol.</p>
<div>
<p><br />
</p>
</div>
<div>
<p>A behaviour is a way to say: give me a module as argument and I will invoke the following callbacks on it, which these argument and so on. A more complex example for behaviours besides a GenServer are the Ecto adapters. When I call GenServer.start(MyModule), I explicitly pass MyModule as a plug-in, and the generic code from GenServer will call into this module when needed.<br />
</p>
</div>
"	
"<p>What will <code>catch error(err)</code> return?</p>
"	"<p><code>{'EXIT', {err, ...stacktrace...}}</code></p>
"	
"<p>What are some of the reasons for running code in a Server process?</p>
"	"<p>* The code must manage a long-running state</p>
<div>
<p>* The code handles a resource that can and should be reused like TCP connection, file handles, database connection etc.</p>
</div>
<div>
<p>* Critical section of the code need to be synchronized. Only one process can execute that code at any moment. </p>
</div>
"	
"<p>How to create a tuple, get n-th element, update element and check size in Erlang?</p>
"	"<pre><code>T = {a, b, c, d, e, f, g, h}.
element(n, T).
setelement(n, T, v).
tuple_size(T).</code></pre>
<p>Tuples are indexed from 1.</p>
"	
"<p>Explain <code>{case_clause, V}</code> - <code>CaseClauseError</code> error.</p>
"	"<table>
<tbody>
<tr class=""odd"">
<td style=""text-align: left;"">No matching branch is found when evaluating a <span style=""background-color: rgb(243, 243, 243);"">case</span> expression. The value <span style=""background-color: rgb(243, 243, 243);""><code>V</code></span> did not match.</td>
</tr>
</tbody>
</table>
"	
"<p>What are methods of starting a supervisor?</p>
"	"<p>A supervisor may be started directly with a list of children via <code>start_link/2</code> or you may define a module-based supervisor that implements the required callbacks.</p>
"	
"<p>Why servers should handle all messages they receive (even if unexpected)?</p>
"	"<p>Because if message queue always grows it will crash the system at some point, or at least cause process slowdown. Each message should be processed or ignored.</p>
"	
"<p>How to start process registry in Elixir and what are options?</p>
"	"<p><code>Registry.start_link(name: :my_registry, keys: :unique)</code><br />
<br />
The single argument is a keyword list of registry options. The mandatory options are :name and :keys.<br />
<br />
The :name option is an atom, and it specif i es the name of the registry process. You’ll use this name to interact with the registry.<br />
The :keys option can either be :unique or :duplicate. In a unique registry, names are unique—only one process can be registered under any key. This is useful when you want to assign a unique role to processes. For example, in your system, only one process could be associated with {:database_worker, 1}. In contrast, in a duplicate registry, multiple processes can have the same name. Duplicate registry is useful in scenarios where a single publisher process needs to send notif i cations to a dynamic number of subscriber processes, which tend to come and go over time.</p>
"	
"<p>What are the uses of module attributes?</p>
"	"<ul>
<li><p>As annotations to instruct compiler - <code>@moduledoc</code> and <code>@doc</code> attributes can be used to provide documentation:</p>
<pre><code>defmodule Math do 
    @moduledoc &quot;&quot;&quot; 
        Provides math-related functions.
        ## Examples
        iex&gt; Math.sum(1, 2)
        3 
      &quot;&quot;&quot;  
     @doc &quot;&quot;&quot;
     Calculates the sum of two numbers.
     &quot;&quot;&quot;
     def sum(a, b), do: a + b end
end</code></pre></li>
<li><p>As constants:</p>
<pre><code>defmodule MyServer do
   @initial_state %{host: &quot;127.0.0.1&quot;, port: 3456}
   IO.inspect @initial_state 
end</code></pre>
<p><br />
</p></li>
<li><p>As temporary storage:</p>
<pre><code>defmodule MyPlug do
   use Plug.Builder
   plug :set_header
   plug :send_ok
   def set_header(conn, _opts) do 
      put_resp_header(conn, &quot;x-header&quot;, &quot;set&quot;)
   end
   def send_ok(conn, _opts) do
      send(conn, 200, &quot;ok&quot;)
   end
end
IO.puts &quot;Running MyPlug with Cowboy on http://localhost:4000&quot;
Plug.Adapters.Cowboy.http MyPlug, []</code></pre>
<p>In the example above, we have used the <code>plug/1</code> macro to connect functions that will be invoked when there is a web request. Internally, every time you call <code>plug/1</code>, the Plug library stores the given argument in a <code>@plugs</code> attribute. Just before the module is compiled, Plug runs a callback that defines a function (<code>call/2</code>) which handles HTTP requests. This function will run all plugs inside <code>@plugs</code> in order.<br />
</p></li>
</ul>
"	
"<p>One way to start an OTP application is to <em>cd</em> into mix project and run <em>iex -S mix.</em> What is an another way to start the application?</p>
"	"<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex
&gt; cd &quot;/hello_world/_build/dev/lib/hello_world/ebin&quot; /hello_world/_bui
ld/dev/lib/hello_world/ebin iex&gt; Application.start(:hello_world) :ok</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>Running '<em>iex -S mix</em>' automatically puts the ebin directory in BEAM's classpath</p>
"	
"<p>When starting supervisor in Elixir, what values for child specification are supported?</p>
"	"<p>Overall, the child specification can be one of the following:<br />
<br />
- a map representing the child specification itself<br />
<br />
- a tuple with a module as first element and the start argument as second - such as <code>{Stack, [:hello]}.</code> In this case, <code>Stack.child_spec([:hello])</code> is called to retrieve the child specification<br />
<br />
- a module - such as <code>Stack</code>. In this case, <code>Stack.child_spec([])</code> is called to retrieve the child specification</p>
"	
"<p>What is the default <code>child_spec/1</code> implementation for a <code>GenServer</code> callback module?</p>
"	"<pre><code>def child_spec(init_arg) do
  default = %{
    id: __MODULE__,
    start: {__MODULE__, :start_link, [init_arg]}
  }
  Supervisor.child_spec(default, opts)
end</code></pre>
<p><br />
where <code>opts</code> are options provided to <code>use GenServer</code>, i.e. <code>:id</code>, <code>:restart</code> or <code>:shutdown</code>. For example:<br />
</p>
<pre><code>use GenServer, restart: :transient, shutdown: 10_000</code></pre>
"	
"<p>What does <code>:""Elixir.Atom"" == Elixir.Atom</code> evaluate to?</p>
"	"<p><code>true</code></p>
"	
"<p>Where can you find Elixir's API reference?</p>
"	"<p><code>hexdocs.pm/elixir</code></p>
"	
"<p>What is the purpose of <code>Supervisor.child_spec/2</code>?</p>
"	"<p>It's used to convert a tuple or a module child specification to a map or modify a child specification. For example, to run the example <code>Stack</code> module with a different <code>:id</code> and a <code>:shutdown</code> value of 10 seconds (10_000 milliseconds):</p>
<pre><code>children = [
  Supervisor.child_spec({Stack, [:hello]}, id: MyStack, shutdown: 10_000)
]</code></pre>
<p>This code will retrieve child spec from <code>Stack</code> module and modify it by adding/changing <code>:id</code> and <code>:shutdown</code> values.</p>
"	
"<p>Explain <code>badarg</code> - <code>ArgumentError</code> error.</p>
"	"<table>
<tbody>
<tr class=""odd"">
<td style=""text-align: left;"">Bad argument. The argument is of wrong data type, or is otherwise badly formed.</td>
</tr>
</tbody>
</table>
"	
"<p>How do you measure execution time of your program execution?</p>
"	"<p>call it with the function</p>
<div class=""codehilite"" style=""background: #f8f8f8"" data-align=""left"">
<pre style=""line-height: 125%""><code>:timer.tc(Module, Function, Arguments) -&gt; {Time, Value} </code></pre>
</div>
<p>where <code>Time</code> is in milliseconds</p>
<p>For example,</p>
<div class=""codehilite"" style=""background: #f8f8f8"" data-align=""left"">
<pre style=""line-height: 125%""><code>iex(8)&gt; :timer.tc(String, :split, [&quot;hello world&quot;])  {116, [&quot;hello&quot;, &quot;world&quot;]} </code></pre>
</div>
"	
"<p>Does BEAM support kernel poll? How to enable it?</p>
"	"<p>Yes, if the OS supports it, Erlang will rely on a kernel poll such as epoll or kqueue, which takes advantage of the OS kernel for nonblocking I/O. You can request the use of a kernel poll by providing the <code>+K true</code> Erlang flag when you start the BEAM.</p>
"	
"<p>What is <code>case</code> control flow format?</p>
"	"<pre><code>case value do
   pattern 1 {when guard-clause 1} -&gt; expression 1
   pattern 2 {when guard-clause 2} -&gt; expression 2
   ...
   pattern n {when guard-clause n} -&gt; expression n
end</code></pre>
<p>Usage example:</p>
<pre><code>case {1, 2, 3} do
  {1, x, 3} when x &gt; 0 -&gt; &quot;Will match&quot;
  _ -&gt; &quot;Would match, if guard condition were not satisfied&quot;
end</code></pre>
"	
"<p>How to enable shell history for iex (or erl)?</p>
"	"<p><code>iex --erl ""-kernel shell_history enabled""</code><br />
<br />
or via env variable:<br />
<br />
<code>ERL_AFLAGS=""-kernel shell_history enabled""</code></p>
"	
"<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(2)&gt; table=:ets.new(:my_table, []) #Refer
ence&lt;0.4030288514.1534984196.194401&gt; iex(3)&gt; :ets.insert(table, {:key
_1,1}) true iex(4)&gt; spawn(fn -&gt; :ets.insert(table, {:key_3, 3}) end)
#PID&lt;0.113.0&gt; iex(7)&gt;  21:59:02.214 [error] Process #PID&lt;0.113.0&gt; rai
sed an exception ** (ArgumentError) argument error     (stdlib) :ets.
insert(#Reference&lt;0.4030288514.1534984196.194401&gt;, {:key_3, 3})  nil</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>Why is the following error thrown? </p>
</div>
"	"<p>ETS table's have by default <strong>protected</strong> access permissions and only the owner process can read from and write to the table. All other processes can only read from the table. You can fix it by making the table access to public.</p>
<div>
<p><br />
</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(12)&gt; table=:ets.new(:table, [:public])
                #Reference&lt;0.4030288514.1534984196.194527&gt; iex(13)&gt; s
pawn(fn -&gt; :ets.insert(table, {:key_3, 5}) end) #PID&lt;0.123.0&gt; iex(14)
&gt; :ets.lookup(table, :key_3)                              [key_3: 5]</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>Here are the table access permissions:</p>
</div>
<div>
<div>
<div>
<div>
<div>
<p>*  :<strong>protected</strong> — The default. The owner process can read from and write to the table. All other processes can read from the table.</p>
</div>
<div>
<p>*  :<strong>public</strong> — All processes can read from and write to the table.</p>
</div>
<div>
<p>*  :<strong>private</strong> — Only the owner process can access the table. </p>
</div>
</div>
</div>
</div>
</div>
"	
"<p>How to define default values for function parameters in Elixir?</p>
"	"<p>Using the <code>//</code>, for example:</p>
<pre><code>def foo(x, y // 7) do
  ...
end</code></pre>
"	
"<p>What are basic responsibilities of a server process?</p>
"	"<ul>
<li>Spawn a separate process</li>
<li>Run an infinite loop in the process</li>
<li>Maintain the process state</li>
<li>React to messages</li>
<li>Send a response back to the caller</li>
</ul>
"	
"<p>How to start Elixir's GenServer?</p>
"	"<p>Via <code>GenServer</code>'s <code>start/2</code> or <code>start_link/3</code>. The function accepts a module, initial argument for <code>init</code> and options, such as <code>:name</code>. For example:<br />
</p>
<pre><code>GenServer.start_link(Stack, [:hello], name: Stack)</code></pre>
"	
"<p>Why shouldn't <code>GenServer.init/1</code> function run too long?</p>
"	"<p>The supervisor starts a child, waits for it to fi nish, and then moves on to start the next child. When the worker is a GenServer, the next child is started only after the init/1 callback function for the current child is fi nished.<br />
You may recall from chapter 7 that init/1 shouldn’t run for a long time. This is precisely why. If Todo.Database was taking, say, fi ve minutes to start, you wouldn’t have the to-do cache available all that time. Always make sure your init/1 functions run quickly, and use the trick mentioned in chapter 7 (a process that sends itself a message during initial-ization) when you need more complex initialization.</p>
"	
"<p>How to define new type in Erlang?</p>
"	"<p><code>-type NewTypeName(TVar1, TVar2, ... TVarN) :: Type.</code><br />
<br />
Example:<br />
<code>-type onOff() :: on | off.-type person() :: {person, name(), age()}.-type people() :: [person()].-type name() :: {firstname, string()}.-type age() :: integer().-type dict(Key,Val) :: [{Key,Val}].</code></p>
"	
"<p>What is tail call optimization? </p>
"	"<p>It is the process by which a smart compiler can make a call to a function and take no additional stack space. The only situation in which this happens is if the last instruction executed in a function <code>f</code> is a call to a function <code>g</code>. (Note: <em>if <code>f</code> calls itself then it becomes tail recursion</em>) The key here is that <code>f</code> no longer needs stack space - it simply calls <code>g</code> and then returns whatever <code>g</code> would return. In this case the optimization can be made that <code>g</code> just runs and returns whatever value it would have to the thing that called <code>f</code>.</p>
<p>Consider, for a moment, this simple function:</p>
<div class=""codehilite"" style=""background: #f8f8f8"" data-align=""left"">
<pre style=""line-height: 125%""><code>sub foo (int a) {   a += 15;   return bar(a); } </code></pre>
</div>
<p>So the sequence of events looks like:</p>
<div class=""codehilite"" style=""background: #f8f8f8"" data-align=""left"">
<pre style=""line-height: 125%""><code>STACK ALLOCATE FOO (do stuff) call function bar STACK ALLOCATE BAR STACK DEALLOCATE BAR RETURN WITH VALUE STACK DEALLOCATE FOO RETURN WITH VALUE </code></pre>
</div>
<p>If you look at it, the stack space that <code>foo</code> has isn't used after the <code>bar</code> function is called. While this isn't a huge amount of space, it is space, and space that isn't needed. If it was <em>freed</em> before <code>bar</code> was called, your program would be a little more space-efficient. For one function this isn't a big deal, but imagine what happens if you're 200 levels deep in a call (perhaps because there's some indirect recursion) and 100 of those levels look like <code>return somefunc();</code>. That's 100 chunks of stack that are being used for no reason. If your stack only had space for 199 chunks, not using those 100 chunks of stack would mean the difference between your program running and your program crashing.</p>
<p>So, what can you, or rather your language compiler, do? Well, what it can do is turn code of the form <code>return somefunc();</code> into the low-level sequence <code>pop stack frame; goto somefunc();</code>. In our example, that means before we call <code>bar</code>, <code>foo</code> <em>cleans itself up</em> and then, rather than calling <code>bar</code> as a subroutine, we do a <em>low-level goto</em> operation to the <em>start of bar</em>. <code>foo</code> has already cleaned itself out of the stack, so when <code>bar</code> starts it looks like whoever called <code>foo</code> has really called <code>bar</code>, and when <code>bar</code> returns its value, it returns it <em>directly to whoever called <code>foo</code></em>, rather than returning it to <code>foo</code> which would then return it to its caller.</p>
<p><a href=""http://web.archive.org/web/20111030134120/http://www.sidhe.org/~dan/blog/archives/000211.html"">Further reading</a></p>
"	
"<p>Explain <code>use</code> macro.</p>
"	"<div>
<p>The <code>use</code> macro is frequently used as an extension point. This means that, when you <code>use</code> a module <code>FooBar</code>, you allow that module to inject <em>any</em> code in the current module, such as importing itself or other modules, defining new functions, setting a module state, etc.</p>
</div>
<p><br />
</p>
<div>
<p>For example, in order to write tests using the ExUnit framework, a developer should use the <code>ExUnit.Case</code> module:</p>
</div>
<pre><code>defmodule AssertionTest do   use ExUnit.Case, async: true    test &quot;always pass&quot; do     assert true   end end</code></pre>
<p>Behind the scenes, use requires the given module and then calls the __using__/1 callback on it allowing the module to inject some code into the current context. Some modules (for example, the above ExUnit.Case, but also Supervisor and GenServer) use this mechanism to populate your module with some basic behaviour, which your module is intended to override or complete. Generally speaking, the following module:</p>
<pre><code>defmodule Example do   use Feature, option: :value end</code></pre>
<p>is compiled into</p>
<pre><code>defmodule Example do   require Feature   Feature.__using__(option: :value) end</code></pre>
"	
"<p>How to list Phoenix's routes?</p>
"	"<pre><code>mix phx.routes</code></pre>
"	
"<p>Explain monitor message format.</p>
"	"<p>In Erlang: <code>{'DOWN', Ref, process, Object, Reason}</code><br />
<br />
In Elixir: <code>{:DOWN, ref, :process, object, reason}</code></p>
"	
"<p>What does <code>iex -S mix</code> do?</p>
"	"<ul>
<li><code>iex -S scriptname</code> finds and executes the given script in PATH</li>
<li>Running <code>iex -S mix</code> tells <code>iex</code> to load the <code>mix</code> script as if I had just typed <code>mix</code> at the command line</li>
<li>So how does mix know to load my mix.exs file and start my applications and dependencies? Let’s ask mix -h.<br />
<br />
mix - Invokes the default task (mix run) in a project</li>
<li>Therefore, <code>iex -S mix</code> is the same as running <code>iex -S mix run</code>, and as <code>mix help run</code> tells us, mix run starts and runs the current application, which it learns about by reading mix.exs.</li>
</ul>
<p><br />
</p>
<p>Note: Why -S instead of -s? According to José, a capital S was chosen to signify that this option behaves differently than other options. All arguments <strong>after -S scriptname are passed to the script</strong>. For example, if you want to run tests in iex with specific options, you might run something like the following.</p>
<p><br />
</p>
<p><code>iex -S mix test --only line:12 test/some/particular/file_test.exs</code></p>
"	
"<p>How do you start an Agent for an empty list?</p>
"	"<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>{:ok, agent_pid} = Agent.start_link(fn -&gt; [] end)</code></pre>
</div></td>
</tr>
</tbody>
</table>
"	
"<p>How to send a kill signal?</p>
"	"<p><code>erlang:exit(Pid, kill) | Process.exit(pid, :kill)</code></p>
"	
"<p>To start a supervisor, Supervisor.start_link(children, opts) needs a predefined list of children. How do you create supervisor for children that dynamic i.e not known at the startup time?</p>
"	"<div>
<div>
<div>
<div>
<p>For such cases, you need a <strong>DynamicSupervisor.start_link(opts)</strong> that can start children on demand.When you start a dynamic supervisor, you don’t provide a list of child specifications, so only the supervisor process is started. Then, whenever you want to, you can start a supervised child using DynamicSupervisor.start_child/2. </p>
</div>
</div>
</div>
</div>
"	
"<p>How to start new supervised mix project?</p>
"	"<p><code>mix new [name] --sup</code></p>
"	
"<p>What is the difference between require and use?</p>
"	"<p><strong>require</strong> directive imports a module's macros into the current namespace. <strong>use</strong> statement on the other hand brings an extension point to modules.</p>
<div>
<p>Imagine that a couple of modules use the same dependencies, and share commons behavior. You can leverage use to perform some sort of set up on each of these modules.</p>
</div>
<div>
<p>The use macro allows you to inject <strong>any code</strong> in the current module.</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p>Let's assume that we use Ecto library in our Curiosum.Authentication.* schemas. To provide a simple solution for common <em>setup</em> operations we can create Curiosum.Authentication.Schema:<br />
</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>defmodule Curiosum.Authentication.Schema do
   defmacro __using__(_opts) do     quote do       use Ecto.Schema
     import Ecto       import Ecto.Changeset       import Ecto.Query
       def changeset(struct, params \\ %{}) do         # assuming tha
t changeset will perform same operations       end     end   end end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>In the above code, we can see __using__/1 macro. The whole magic happens inside of it. Any code you put into __using__/1 will be injected and executed inside of modules that use it:<br />
</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>defmodule Curios
um.Authentication.Admin do   use Curiosum.Authentication.Schema  end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<div>
<p>Thanks to use Curiosum.Authentication.Schema, the whole code inside of __using__ has been injected into Curiosum.Authentication.Admin module.</p>
</div>
<div>
<p>In the background use macro is being compiled into:</p>
</div>
</div>
<div>
<p><br />
</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>defmodule Curiosum.Authentication.Admin do   require Curiosum.A
uthentication.Schema   Curiosum.Authentication.Schema.__using__  end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
"	
"<p>List <code>cowboy</code> protocols.</p>
"	"<ul>
<li><code>cowboy_http</code> - Implements HTTP/1.1 and HTTP/1.0 as a Ranch protocol.</li>
<li><code>cowboy_http2</code> - Implements HTTP/2.0 as a Ranch protocol.</li>
<li><code>cowboy_websocket</code> - Implements Websocket as a Ranch protocol. It also defines a callback interface for handling Websocket connections.</li>
</ul>
"	
"<p>List and explain three methapors* for reading Erlang code.<br />
<br />
<em>*ferd.ca/on-erlang-s-syntax.html</em></p>
"	"<p>Template view, English sentence and And, Or, Done.</p>
<h4 id=""template-view"">Template view</h4>
<p>In this view, Erlang code can be seen as a generic template you fill:</p>
<pre><code>head1(Args) [Guard] -&gt;     Expression1, Expression2, ..., ExpressionN; head2(Args) [Guard] -&gt;     Expression1, Expression2, ..., ExpressionN; headN(Args) [Guard] -&gt;     Expression1, Expression2, ..., ExpressionN. </code></pre>
<h4 id=""english-sentence"">English sentence</h4>
<p>This one is about comparing Erlang code to English. Imagine you're writing a list of things. Well, no. Don't imagine it, read it.</p>
<pre><code>I will need a few items on my trip:   if it&#39;s sunny, sunscreen, water, a hat;   if it&#39;s rainy, an umbrella, a raincoat;   if it&#39;s windy, a kite, a shirt. </code></pre>
<p>An Erlang translation can remain a bit similar:</p>
<pre><code>trip_items(sunny) -&gt;     sunscreen, water, hat; trip_items(rainy) -&gt;     umbrella, raincoat; trip_items(windy) -&gt;     kite, shirt. </code></pre>
<h4 id=""and-or-done"">And, Or, Done</h4>
<p>Another variant of this one has been suggested to me on #erlang. The user simply reads , as 'and', ; as 'or' and . as being done. A function declaration can then be read as a series of nested logical statements and affirmations.</p>
"	
"<p>What is the difference between </p>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>&amp;&amp;, ||, !</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
<div>
<p>and<br />
</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>and, or, not</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
"	"<p>They both are boolean short-circuit operators. Only difference is that (and,or,not) require LHS value to be strict boolean. For example,</p>
<div>
<p><br />
</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(1)&gt; false
or 6 6 iex(2)&gt; 6 or false ** (BadBooleanError) expected a boolean on
left-side of &quot;or&quot;, got: 6  iex(3)&gt; false || 6 6 iex(4)&gt; 6 || false 6</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
"	
"<p>What is the Erlang module used for debugging processes?</p>
"	"<p>Through various hooks, <code>:sys</code> module allows developers to introspect the state of the process and trace system events that happen during its execution, such as received messages, sent replies and state changes.</p>
"	
"<div>
<p>What are guard clauses?</p>
</div>
<div>
<p><br />
</p>
</div>
"	"<p>Guard clauses are a way to augment pattern matching with more complex checks. They are allowed in a predefined set of constructs where pattern matching is allowed. They are predicates, which are used to conditionally invoke function clauses.<br />
<br />
Not all expressions are allowed in guard clauses, but only a handful of them. This is a deliberate choice. This way, Elixir (and Erlang) can make sure that nothing bad happens while executing guards and no mutations happen anywhere. It also allows the compiler to optimize the code related to guards efficiently.</p>
<pre><code>defmodule Factorial do
  def of(0), do: 1
  def of(n) when n &gt; 0 do
    n * of(n-1)
  end
end</code></pre>
"	
"<p>What is an EPMD?</p>
"	"<div>
<div>
<div>
<div>
<p>Erlang Port Mapper Daemon (EPMD), is an OS process that’s started automatically when you start the first Erlang node on the host machine. This component acts as <strong>a node name resolver</strong> on the host machine. EPMD knows the names of all currently running BEAM nodes on the machine. When a node wants to connect to a node on this machine, it first queries EPMD to determine which port the target node is listening on, and then it contacts the target node. EPMD listens on port 4369, and this port must be accessible from remote machines. </p>
</div>
</div>
</div>
</div>
"	
"<p>Explain spec macro, Erlang</p>
"	"<p>For example, <code>-spec plan_route(point(), point()) -&gt; route()</code>; means that if the function plan_route/2 is called with two input arguments,<br />
both of type point(), then it will return an object of type route().</p>
"	
"<p>Node.set_cookie/2 is defined as </p>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>Node.set_cookie(node \\ Node.self(), cookie)</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>When do you need to pass the node name?</p>
"	"<p>When you need to prevent a fully connected cluster where all nodes can directly talk to each other. For a node <strong>Node1</strong> with magic cookie <strong>Cookie1</strong> to be able to connect to, or accept a connection from, another node <strong>Node2</strong> with a different cookie <strong>DiffCookie</strong>, the function <em>Node.set_cookie(Node2, DiffCookie)</em> must first be called at <strong>Node1</strong>. This could be useful in scenario like below:</p>
<div>
<p><br />
</p>
</div>
<div>
<p>For example, let’s say you want to connect node A to B, and B to C, but you don’t want to connect A and C. This can be done by assigning different cookies to all the nodes and then, in A and C, using the Node.set_cookie/2 function, which allows you to explicitly set different cookies that need to be used when connecting to different nodes. </p>
</div>
"	
"<p>Explain four Erlang BIFs to operate on registered processed</p>
"	"<p><img src=""16641208252888332294989921128311.jpg"" /></p>
"	
"<p>How do you start a project called <strong><code>myfirstproject</code></strong> using Mix?</p>
"	"<ul>
<li>Change to directory where you want the project root to reside</li>
<li><code>mix new myfirstproject</code></li>
<li>Above mix command creates a project root called <code>myfirstproject</code> and the following files/sub-directories:<br />

<ol type=""1"">
<li><em>/mix.exs</em> - project configuration<br />
</li>
<li><em>/lib/</em> - Source code<br />
</li>
<li><em>/config/</em> - Application configuration<br />
</li>
<li><em>/test/</em> - Unit tests<br />
</li>
<li><em>.gitignore</em> - Git ignore files<br />
</li>
<li><em>.formatter</em> - code formatting</li>
</ol></li>
<li>Edit <em>mix.exs</em> file to,
<ol type=""1"">
<li>Edit project name etc. defined under <code>def project()</code> method</li>
<li>Any applications that need to be started defined under <code>def application()</code> method</li>
<li>Any dependencies defined under <code>def deps()</code> method</li>
</ol></li>
<li><code>mix deps</code> to list all dependencies and their status listed in <code>mix.exs</code></li>
<li><code>mix deps.get</code> to get all dependencies</li>
<li><code>mix test</code> to run the unit tests</li>
<li><code>mix compile</code> to compile or <code>mix run</code> to compile and run</li>
</ul>
"	
"<p>What is Mix?</p>
"	"<p>Mix is a build tool that ships with Elixir that provides tasks for creating, compiling, testing the application and managing its dependencies.</p>
"	
"<p>Explain Erlang's <code>{badmatch,V}</code> - <code>MatchError</code> error.</p>
"	"<table>
<tbody>
<tr class=""odd"">
<td style=""text-align: left;"">Evaluation of a match expression failed. The value <span style=""background-color: rgb(243, 243, 243);"">V</span> did not match.</td>
</tr>
</tbody>
</table>
"	
"<p>Where can you find Mix's API reference?</p>
"	"<p><code>hexdocs.pm/mix</code></p>
"	
"<p>What is the purpose of <code>mix.lock</code> file?</p>
"	"<p>After we compile the project, mix.lock will include the specific versions of the libraries we depend on, so we guarantee that our production machines use exactly the same versions that we used during development and in our build servers.</p>
"	
"<p>Supervisors are under the cover implemented using GenServers. Can you think about writing your own using GenServers?</p>
"	"<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>defmodule GenServerSupervisor do   use GenServer    # Client API #
  def start_link(child_specs_list) do     GenServer.start_link(__MODU
LE__, child_specs_list)   end    # Server API #   def init(child_spec
s_list) do     Process.flag(:trap_exit, true)     state = child_specs
_list |&gt; start_children |&gt; Enum.into(%{})     {:ok, state}   end    d
ef handle_info({:EXIT, from, reason}, state) do     case Map.get(stat
e, from) do       nil -&gt; {:noreply, state}       child_spec -&gt;
  {:ok, pid} = start_child(child_spec)         new_state = Map.delete
(state, from) |&gt; Map.put(pid, child_spec)         {:noreply, new_stat
e}     end   end    # Helper Functions #   defp start_children([child
_spec | rest]) do     case start_child(child_spec) do       {:ok, pid
} -&gt;         [{pid, child_spec} | start_children(rest)]       :error
-&gt; :error     end   end    defp start_children([]), do: []    defp st
art_child({module, fun, args}) do     case apply(module, fun, args) d
o       {:ok, pid} -&gt; {:ok, pid}       _ -&gt; :error     end   end end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
"	
"<p>How to perform RPC on different node?</p>
"	"<p><code>rpc:call(node@host, Mod, Fun, [Args])</code></p>
"	
"<p>What is the difference between Task.async(fun) and Task.start_link(fun)?</p>
"	"<p>Task.async(and Task.await) sends the result message back to the starter process. Sometimes the starter process doesn’t need to be notified about the task’s outcome. For example, let’s say that when handling a web request you start a longer-running task that communicates with the payment gateway. You could start the task and immediately respond to the user that the request has been accepted. Once the task is done, the server would issue a notification about the outcome, perhaps via WebSocket or an email. Or suppose a task needs to produce a side effect, such as a database update, <strong>without notifying the starter process</strong>. </p>
<div>
<p><br />
</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(1)&gt; task=Task.async(fn -&gt; Process.sleep(2_000); &quot;blah&quot; end)
               %Task{
                           owner: #PID&lt;0.366.0&gt;,   pid: #PID&lt;0.387.0&gt;
,   ref: #Reference&lt;0.3892106341.61079555.177231&gt; } iex(2)&gt; Task.awai
t(task)                                                       &quot;blah&quot;</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p>Notice that the message ""blah"" returned back to iex shell</p>
</div>
<div>
<p><br />
</p>
</div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(6)&gt; task=Task.start_link(fn
 -&gt; Process.sleep(2_000); &quot;blah&quot; end)           {:ok, #PID&lt;0.385.0&gt;}</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
<div>
<p>      </p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p>You will never see the result message from started process printed in iex.                                    <br />
</p>
</div>
<div>
<p><br />
</p>
</div>
"	
"<p>What is an umbrella application? How to create umbrella project?</p>
"	"<p>Todo</p>
"	
"<p>How many async threads Erlang uses?</p>
"	"<p>By default, BEAM fires up 10 async threads, but you can change this via the <code>+A n</code> Erlang flag.</p>
"	
"<p>What happens if GenServer process dies when client makes a sync call?</p>
"	"<p>When you issue a synchronous request via <code>GenServer.call</code>, if a server process crashes, an exit signal will occur in your client process. This is a simple but very important example of cross-process error propagation. Internally, GenServer sets up a temporary monitor that targets the server process. While waiting for a response from the server, if a <code>:DOWN</code> message is received, GenServer can detect that a process has crashed and raise a corresponding exit signal in the client process.</p>
"	
"<p>Explain <code>GenServer</code>'s <code>init</code>, <code>handle_cast</code> and <code>handle_call</code>.</p>
"	"<ul>
<li><code>init/1</code> accepts one argument. This is the second argument provided to <code>GenServer.start/2</code>, and you can use it to pass data to the server process while starting it.</li>
<li>The result of <code>init/1</code> must be in the format <code>{:ok, initial_state}</code>.</li>
<li><code>handle_cast/2</code> accepts the request and the state and should return the result in the format <code>{:noreply, new_state}</code>.</li>
<li><code>handle_call/3</code> takes the request, the caller information, and the state. It should return the result in the format <code>{:reply, response, new_state}</code>.</li>
</ul>
<p><br />
For example:<br />
</p>
<pre><code>defmodule KeyValueStore do
  use GenServer
  
  def init(_) do
    {:ok, %{}}
  end
  
  def handle_cast({:put, key, value}, state) do
    {:noreply, Map.put(state, key, value)}
  end
  
  def handle_call({:get, key}, _, state) do
    {:reply, Map.get(state, key), state}
  end
end</code></pre>
"	
"<p>What is Erlang's <code>init</code> module?</p>
"	"<p><code>init</code> module is responsible for Erlang/BEAM system startup. It contains functions to configure boot, getting cmd arguments, stopping the VM and shell options to evaluate Erlang expressions.</p>
"	
"<p>What is the default maximum restart frequency for supervisor?</p>
"	"<p>Three restars in five seconds.</p>
"	
"<p>How do you import a specific function in a module?</p>
"	"<p>Using the <code>only</code> option with <code>import</code>. For example:</p>
<pre><code>import List, only: [flatten: 1]</code></pre>
<p><br />
This will import only the <code>flatten</code> method of the <code>List</code> module. The full syntax of <code>import</code> is:</p>
<pre><code>import Module [, only:|except: ] list_of_functions</code></pre>
"	
"<p>How to check Erlang's code path?</p>
"	"<p><code>code:get_path()</code></p>
"	
"<p>What will <code>catch throw(err)</code> return?</p>
"	"<p><code>err</code></p>
"	
"<p>How do Erlang processes communicate?</p>
"	"<p>Sharing no memory, processes communicate via asynchronous messages. This means there are no complex synchronization mechanisms such as locks, mutexes, or semaphores. </p>
"	
"<p>Explain basic function of supervisor process.</p>
"	"<ul>
<li>The supervisor process traps exits, and then starts the child processes.</li>
<li>If at any point in time a child terminates, the supervisor process receives a corresponding exit message and performs corrective actions, such as restarting the crashed process.</li>
<li>If a supervisor process terminates, its children are also taken down.</li>
</ul>
"	
"<p>What is OTP? (Expand acronym, name 5 features)</p>
"	"<div>
<p>OTP is Open Telecom Platform (OTP). Despite its somewhat unfortunate name, the framework has nothing to do with telecom systems. It’s a general-purpose framework that abstracts away many typical Erlang tasks such as:</p>
</div>
<div>
<ul>
<li>Concurrency and distribution patterns</li>
<li>Error detection and recovery in concurrent systems</li>
<li>Packaging code into libraries</li>
<li>Systems deployment</li>
<li>Live code updates</li>
</ul>
</div>
"	
"<p>What does <code>:""Elixir.Atom"" = Atom</code> evaluate to?</p>
"	"<p><code>true</code></p>
"	
"<p>Difference between throw, exit and error?</p>
"	"<p>There are 3 classes which can be caught with a try ... catch: throw, error and exit.<br />
<br />
throw is generated using throw/1 and is intended to be used for non-local returns and does not generate an error unless it is not caught (when you get a nocatch error).<br />
<br />
error is generated when the system detects an error. You can explicitly generate an error using error/1. The system also includes a stacktrace in the generated error value, for example {badarg,[...]}.<br />
<br />
exit is generated using exit/1 and is intended to signal that this process is to die.</p>
"	
"<p>How to implement naive sleep function using receive?</p>
"	"<pre><code>sleep(T) -&gt;
  receive
  after T -&gt;
    true
  end.</code></pre>
"	
"<p>What is <code>=</code> operator called in Elixir?</p>
"	"<p>It's <em>match</em> operator, it's used in pattern matching.</p>
"	
"<p>How to execute Erlang commands automatically after system is loaded?</p>
"	"<p>Add <code>.erlang</code> script in you home directory or current directory. It will be executed after BEAM VM is started.</p>
"	
"<p>What is the difference between Application environment variable and a Mix environment variable?</p>
"	"<div>
<div>
<div>
<p>An application environment is a <strong>key/value store</strong> that holds various settings for your OTP application. A mix environment determines the <strong>compilation target</strong>, such as development, test, or production. </p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<div>
<div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>$ MIX_ENV=test iex -S mix</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex(1)&gt; Application.get_env(:todo, :http_port)  5455</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>First shell command, sets up the mix environment whereas the second function call gets the application environment variable</p>
</div>
</div>
</div>
</div>
</div>
</div>
"	
"<p>what happens when you run the following code? </p>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>spawn fn -&gt; raise &quot;oops&quot; end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
"	"<p>an error is logged, but the parent process remains alive</p>
"	
"<p>What is the purpose of <code>GenServer.handle_info</code> callback?</p>
"	"<p><code>handle_info/2</code> is invoked for all messages which are not handled by <code>handle_cast</code> and <code>handle_call</code>. <code>msg</code> is the message and state is the current state of the GenServer. When a timeout occurs the message is <code>:timeout</code>. Return values are the same as <code>handle_cast/2</code>. This callback is optional. If one is not implemented, the received message will be logged.</p>
"	
"<p>Why spawning using MFA over anonymous functions?</p>
"	"<p>Spawning a function with an explicit module, function name, and argument list (called an MFA) is the proper way to ensure that our running processes will be correctly updated with new versions of the module code if it is compiled while it is being used. The dynamic code upgrade mechanism does not work with anonymous functions.</p>
"	
"<p>Why does Erlang have uppercase variables?</p>
"	"<p>Because of Prolog.</p>
"	
"<p>What is pattern matching and assignment operation (=) mean?</p>
"	"<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code></code></pre>
</div></td>
</tr>
</tbody>
</table>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>Pattern = Expression</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
<p>In a pattern matching operation, the expression on RHS is matched against the pattern on LHS and the value form the expression is <strong>bound/assigned</strong> the pattern.</p>
<div>
<p><br />
</p>
</div>
<div>
<p>For the pattern matching to work, all fields from the expression should be matching the pattern otherwise an error will be thrown. For example,</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex&gt; %Fraction{} = %{a: 1, b:
2}  ** (MatchError) no match of right hand side value: %{a: 1, b: 2}</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
<div>
<div>
<div>
<p>When matching a map to a struct pattern, this isn’t the case, because %Fraction{} contains the field struct, which isn’t present in the map being matched.<br />
</p>
</div>
</div>
<div>
<div>
<p><br />
</p>
</div>
<div>
<p>This is equivalent to below:</p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex&gt; %{__struct__: Fraction, a: a, b: b} = %{ a: 1, b: 2}</code></pre>
<pre style=""line-height: 125%""><code>** (MatchError) no match of right hand side value: %{a: 1, b: 2}</code></pre>
<div>
<p><br />
</p>
</div>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
</div>
</div>
"	
"<p>By default, if you connect node A to B and B to C using Node.connect/1. Node A will be connected to both B &amp; C. How would you prevent such a fully connected cluster?</p>
"	"<div>
<div>
<div>
<div>
<p>This can be done by assigning different cookies to all the nodes and then, in A and C, using the <em>Node.set_cookie/2</em> function, which allows you to explicitly set different cookies that need to be used when connecting to different nodes. </p>
</div>
</div>
</div>
</div>
"	
"<p>What is a process dictionary; what are some function used to access it?</p>
"	"<p><span style=""background-color: rgb(255, 255, 255);"">As the name implies, process dictionaries are dictionaries belonging to specific process where the keys and values can be any term (any type of value). The </span><code>Process.get/1</code><span style=""background-color: rgb(255, 255, 255);"">, </span><code>Process.put/2</code><span style=""background-color: rgb(255, 255, 255);""> and </span><code>Process.delete/1</code><span style=""background-color: rgb(255, 255, 255);""> functions (and other from Process module) are used to manipulate the current process dictionary. PDs are isolated and belong to specific process.</span></p>
"	
"<p>How do you call anonymous functions?</p>
"	"<p>Using a dot operator, e.g.:</p>
<pre><code>foo.(1, 2, 3)</code></pre>
"	
"<p>What is a preferred library for implementing cron-like scheduling in Elixir?</p>
"	"<p>Quantum library.</p>
"	
"<p>Difference between <strong>require</strong>,<strong>import</strong>,<strong>use</strong>?</p>
"	"<ul>
<li>A module consists of functions and macros. You can use functions in other modules using fully qualified names but not macros;you need to <strong>require</strong> a module to use its macros:</li>
</ul>
<div class=""codehilite"" style=""background: #f8f8f8"" data-align=""left"">
<pre style=""line-height: 125%""><code>iex()&gt; Integer.mod(5, 3) # mod is a function 2 iex()&gt; Integer.is_even(42) ** (CompileError) iex:3: you must require Integer before invoking the macro Integer.is_even/1     (elixir) src/elixir_dispatch.erl:97: :elixir_dispatch.dispatch_require/6 iex()&gt; require Integer Integer iex()&gt; Integer.is_even(42) # is_even is a macro true </code></pre>
</div>
<ul>
<li><strong>use</strong> <em>requires</em> the given module and then calls the <strong>using</strong>/1 callback on it allowing the module to inject some code into the current context. So writing use X is same as writing</li>
</ul>
<div class=""codehilite"" style=""background: #f8f8f8"" data-align=""left"">
<pre style=""line-height: 125%""><code>require X X.__using__() </code></pre>
</div>
<ul>
<li><strong>import</strong> basically imports the modules namespace so you don't have to use the fully qualified name when calling functions AND macros</li>
</ul>
"	
"<p>How to exit shell that froze/hang up?</p>
"	"<p>Type <code>C-g</code> to open shell controls and type <code>?</code> to get help.</p>
"	
"<p>When you create a new project using <code>mix new new_project</code> what are the artifacts created?</p>
"	"<ul>
<li><code>mix.exs</code> - project configuration</li>
<li><code>config/</code> - to store application specific configurations</li>
<li><code>lib/</code> - for source files</li>
<li><code>test/</code> - for unit tests</li>
</ul>
"	
"<p>Explain <code>timeout_value</code> error.</p>
"	"<table>
<tbody>
<tr class=""odd"">
<td style=""text-align: left;"">The timeout value in a <span style=""background-color: rgb(243, 243, 243);"">receive..after</span> expression is evaluated to something else than an integer or <span style=""background-color: rgb(243, 243, 243);"">infinity</span>.</td>
</tr>
</tbody>
</table>
"	
"<p>GenServer.call/3 spec is as below:</p>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>call(server_pid, request, timeout \\ 5000)</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>What is the timeout here implies?</p>
</div>
"	"<p>GenServer.call/3 makes a synchronous call to server_pid and waits until the timout (<strong>after</strong> <em>timeout</em> clause in <strong>receive</strong> loop). The default timeout is five seconds, but you can configure it to be less for better responsiveness or more. Note that when a request times out, it isn’t removed from the <strong>server_pid's mailbox</strong>. A request is a message that’s placed in the server_pid’s mailbox. A timeout means you give up waiting on the response, but the message remains in the receiver’s mailbox and will be processed at some point. </p>
"	
"<p>Explain <code>noproc</code> error.</p>
"	"<p>Trying to link or monitor to a non-existing process or port.</p>
"	
"<p>A process can be registered using Process.register/1.</p>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex&gt; Process
.register(:thing, pid)  iex&gt; Process.whereis(:thing)  #PID&lt;0.134.00&gt;</code></pre>
</div></td>
</tr>
</tbody>
</table>
<div>
<div>
<div>
<div>
<p>Elixir’s standard library also includes the implementation of a process registry in the Registry module </p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>iex&gt; Registry.start_link(name: :registry, keys: :unique)</code></pre>
<pre style=""line-height: 125%""><code>{:ok, #PID&lt;0.139.0&gt;}</code></pre>
<pre style=""line-height: 125%""><code>iex&gt; Registry.register(:registry, :thing, nil)  {:ok, #PID&lt;0.140.
0&gt;}  iex&gt; Registry.lookup(:registry, :thing)  [{#PID&lt;0.126.0&gt;, nil}]</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p>Why there are two APIs to do the same job?</p>
</div>
</div>
</div>
</div>
</div>
"	"<p>This module allows you to associate a process with one or more arbitrary complex keys, and then find the process (its pid) by doing a key-based lookup. In other words, Registry lets you use any term, not just atoms, so you can use it for dynamically created processes. This allows you to register processes using arbitrary terms such as {:database_worker, 1}, {:database_worker, 2}, and so on. </p>
"	
"<p>What is the difference between `spawn_link` and `spawn_monitor`?</p>
"	"<p><em>Linking</em> joins the calling process and spawned process—each receives notifications about the other. By contrast, <em>monitoring</em> lets a process spawn another and be notified of its termination, but without the reverse notification—it is one-way only(spawned-process to calling process).</p>
<p>In linking, a process receives an :EXIT message when the other process exits or fails, or if it doesn’t exist. When you monitor a process, you receive a :DOWN message when it exits or fails, or if it doesn’t exist.</p>
<p>If the intent is that a failure in one process should <em>terminate</em> another, then you need links. If instead you <em>need to know</em> when some other process exits for any reason, choose monitors.</p>
<div class=""codehilite"" style=""background: #f8f8f8"" data-align=""left"">
<pre style=""line-height: 125%""><code>defmodule Monitor1 do   import :timer, only: [ sleep: 1 ]    def sad_function do     sleep 500     exit(:boom)   end   def run do     res = spawn_monitor(Monitor1, :sad_function, [])     IO.puts inspect res     receive do       msg -&gt;         IO.puts &quot;MESSAGE RECEIVED: #{inspect msg}&quot;     after 1000 -&gt;         IO.puts &quot;Nothing happened as far as I am concerned&quot;     end   end end </code></pre>
</div>
<div class=""codehilite"" style=""background: #f8f8f8"" data-align=""left"">
<pre style=""line-height: 125%""><code>$ elixir -r monitor1.exs {#PID&lt;0.78.0&gt;, #Reference&lt;0.1328...&gt;} MESSAGE RECEIVED: {:DOWN, #Reference&lt;0.1328...&gt;, :process,                       #PID&lt;0.78.0&gt;, :boom} </code></pre>
</div>
"	
"<p>What is the difference between alias vs import?</p>
"	"<div>
<p><strong>Aliases</strong> are great for <strong>shortening module names</strong> but <strong>import</strong> helps when we use functions from a given module extensively and want to <strong>skip using module name</strong> part.</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p><strong>alias</strong></p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>defmodule MyModule do  alias Curiosum.Authenticatio
n.Admin  def function do     Admin.changeset(admin, params)  end end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p><strong>import</strong></p>
</div>
<div>
<table>
<colgroup>
<col style=""width: 100%"" />
</colgroup>
<tbody>
<tr class=""odd"">
<td><div class=""highlight"" style=""background: #f8f8f8"">
<pre style=""line-height: 125%""><code>defmodule M
yModule do  alias Curiosum.Authentication.Admin  import Admin, only:
[changeset: 2]  def function do    changeset(admin, params)  end end</code></pre>
</div></td>
</tr>
</tbody>
</table>
<p><br />
</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p><br />
</p>
</div>
<div>
<p><br />
</p>
</div>
"	
"<p>Explain the difference between <code>=:=</code> and <code>==</code> and <code>=/=</code> and <code>/=</code>.</p>
"	"<p><code>=:=</code> and <code>=/=</code> are type-strict, whereas <code>==</code> and <code>/=</code> are not.</p>
"	
